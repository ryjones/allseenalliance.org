<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="https://identity.allseenalliance.org"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>German Viscuso&#039;s blog</title>
 <link>https://identity.allseenalliance.org/blog/11735</link>
 <description></description>
 <language>en</language>
<item>
 <title>Get smart things talking with AllJoyn and Kii</title>
 <link>https://identity.allseenalliance.org/news/blogs/2014/09/get-smart-things-talking-alljoyn-and-kii</link>
 <description>
		&lt;span class=&quot;a2a_kit a2a_target addtoany_list&quot; id=&quot;da2a_1&quot;&gt;
			&lt;a class=&quot;a2a_button_facebook&quot;&gt;&lt;/a&gt;
&lt;a class=&quot;a2a_button_twitter&quot;&gt;&lt;/a&gt;
&lt;a class=&quot;a2a_button_google_plus&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save&quot; href=&quot;http://www.addtoany.com/share_save#url=https%3A%2F%2Fidentity.allseenalliance.org%2Fnews%2Fblogs%2F2014%2F09%2Fget-smart-things-talking-alljoyn-and-kii&amp;amp;title=Blogs%20-%20AllSeen%20Alliance&quot;&gt; Share&lt;/a&gt;
		&lt;/span&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--//--&gt;&lt;![CDATA[//&gt;&lt;!--
da2a.script_load();
//--&gt;&lt;!]]&gt;
&lt;/script&gt;
		
  &lt;div class=&quot;field-body view-mode-rss&quot;&gt;
    &lt;p&gt;&lt;em&gt;This post was originally shared on the &lt;a href=&quot;http://blog.kii.com/?p=4229&quot; target=&quot;_blank&quot;&gt;blog of AllSeen Alliance member Kii.&lt;/a&gt; &lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Avoid lower-level network protocols and hardware in your Internet of Things projects with AllJoyn open source software.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As members of the &lt;a href=&quot;https://allseenalliance.org/&quot;&gt;AllSeen Alliance&lt;/a&gt; we’re excited about the &lt;a href=&quot;https://allseenalliance.org/alljoyn-framework-tutorial&quot;&gt;AllJoyn® framework&lt;/a&gt; for Internet of Things (&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_of_Things&quot;&gt;IoT&lt;/a&gt;) projects. The de facto object-oriented approach, AllJoyn reduces development complexity by allowing for proximity peer to peer over various transports. It’s written in C++ at its core, provides multiple language bindings (such as Java, JavaScript, C#, ObjC) and supports complete implementations across various operating systems and chipsets.&lt;/p&gt;&lt;p&gt;Below are the steps to quickly get started with AllJoyn using JavaScript binding (in nodejs) to allow peers to exchange messages. You’ll also learn how to cloud-enable the project by logging received messages on &lt;a href=&quot;http://en.kii.com/&quot;&gt;Kii&lt;/a&gt; for later processing. In this tutorial we’re sending text messages but Kii can richer data such as music, photo, video, etc so you can be sending songs to smart speakers or photos to a smart TV with cloud-enabled storage and Analytics, for example.&lt;br /&gt; &lt;/p&gt;&lt;h2&gt;&lt;strong&gt;AllJoyn framework overview&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Before jumping into code, you should know a few AllJoyn basics. Any peer participating in an AllJoyn conversation must “talk” via a (relatively low level) bus. Think of it as the highway in which all AllJoyn messages travel. First your app needs to attach to the bus by creating a bus attachment. Through a bus a peer can participate in an AllJoyn conversation but it has to be done through a concrete interface. The interface is created in the bus with the purpose of handling shared objects and signals sent to the objects. In our example the peers will share a chat object in the bus and signals sent to it will be relayed to the other peers as messages.&lt;/p&gt;&lt;p&gt;Next you have to decide whether your app wants to join and use an existing service or advertise one for others to join. Assuming you want to advertise a service, give it a recognizable name. Other peers will try to locate your service using it. Then bind a port (e.g. 27) to create a session over the bus. The steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a BusAttachment and connect to the AllJoyn framework to communicate with other AllJoyn applications&lt;/li&gt;&lt;li&gt;Create an Interface in the Bus and define the Signals that it will handle&lt;/li&gt;&lt;li&gt;Create a BusObject and pair it with the Interface (after starting the Bus)&lt;/li&gt;&lt;li&gt;Define a SignalHandler for signals sent to the BusObject&lt;/li&gt;&lt;li&gt;Register the BusObject with the Bus and connect&lt;/li&gt;&lt;li&gt;If Advertising:&lt;ul&gt;&lt;li&gt;Choose a unique identifier. Create a unique name&lt;/li&gt;&lt;li&gt;Create a Session other applications can join&lt;/li&gt;&lt;li&gt;Tell other applications you’re there by advertising the service name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If Joining:&lt;ul&gt;&lt;li&gt;Find other applications nearby by looking for a name prefix&lt;/li&gt;&lt;li&gt;Define a BusListener to join a Session once a service name is found&lt;/li&gt;&lt;li&gt;Join a session that has been found&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Communicate with other applications in your group&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Don’t panic. We’ll go through the code needed to achieve all the necessary steps below.&lt;br /&gt; &lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Install and compile AllJoyn&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Before taking AllJoyn for a spin let’s install it. You could download the source and compile it yourself (e.g. for a &lt;a href=&quot;https://gist.github.com/germanviscuso/30cfa7dfb041c12e6ba3&quot;&gt;Raspberry Pi&lt;/a&gt;) but the easiest way is to use the &lt;a href=&quot;https://www.npmjs.org/package/alljoyn&quot;&gt;npm package&lt;/a&gt; (thanks &lt;a href=&quot;https://github.com/octoblu&quot;&gt;Octoblu&lt;/a&gt;!) and test the framework with the JavaScript binding (requires nodejs). Installation goes like this:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://nodejs.org/download/&quot;&gt;Install&lt;/a&gt; npm and nodejs (alternative install available &lt;a href=&quot;https://gist.github.com/germanviscuso/30cfa7dfb041c12e6ba3&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/alljoyn&quot;&gt;Install&lt;/a&gt; the AllJoyn npm package&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/node-jquery-xhr&quot;&gt;Install&lt;/a&gt; the node-jquery-xhr npm package (required by the Kii js SDK)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://developer.kii.com/?locale=en#downloads&quot;&gt;Download&lt;/a&gt; the Kii js SDK and place on the same directory where you’ll run your scripts&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OpjVzKeLpEQ&quot;&gt;Test&lt;/a&gt; the example-host.js and example-client.js by Octublu to make sure everything works&lt;ul&gt;&lt;li&gt;On Mac the scripts are located on /opt/local/lib/node_modules/alljoyn (if you installed globally with -g) and can be run with the node command&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;br /&gt;&lt;strong&gt;Advertise the chat service&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Next take a look at our &lt;a href=&quot;https://gist.github.com/germanviscuso/9c81c5b9ab8cd085dff3&quot;&gt;nodejs script.&lt;/a&gt; It can run in host mode to advertise a chat service for other peers to join. Or you can run it as a client, which will look for a service advertised by the host on the network by name, and then connect to it. This setup allows as many clients as you want but there must be only one host. The reason for using a single script for host and client is that 95% of the code is shared (see below).&lt;/p&gt;&lt;p&gt;Once connected all peers (host and clients) have the same behavior listening to and showing incoming messages, and allowing you to type messages for other peers to see. As an add-on all hosts and clients log incoming messages on the cloud with Kii for later analysis.&lt;/p&gt;&lt;h2&gt;&lt;br /&gt;&lt;strong&gt;Initialize and authenticate with Kii&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Once you created a Kii app at &lt;a href=&quot;http://blog.kii.com/developer.kii.com&quot;&gt;developer.kii.com&lt;/a&gt;, write down the app ID and key to initialize Kii:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i61.tinypic.com/2poxhkk.png&quot; style=&quot;height:128px; margin:10px; width:627px&quot; /&gt;&lt;/p&gt;&lt;p&gt;Once Kii is initialized a sign-in is attempted with the peer name and password passed via the command line. If this fails a first time registration is attempted against the Kii service:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i58.tinypic.com/5cerdl.png&quot; style=&quot;height:566px; margin:10px; width:630px&quot; /&gt;&lt;/p&gt;&lt;p&gt;Note that the Kii API provides async method calls (with callbacks) in its methods, which makes control fairly easy and allows you to keep working on your script while a user signs in or registers.&lt;/p&gt;&lt;h2&gt;&lt;br /&gt;&lt;strong&gt;Set up the AllJoyn bus&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Some bus setup has to be done in any chat peer that wants to participate in a conversation using AllJoyn:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i62.tinypic.com/34rjdyd.png&quot; style=&quot;height:409px; margin:10px; width:637px&quot; /&gt;&lt;/p&gt;&lt;p&gt;A chat object is used as a common structure between peers to receive signals. The signal handler will interpret signals as messages.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Advertise the service on the host&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;After hooking up to an AllJoyn bus the host advertises the service name, combining a session, port and port listener callback:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i62.tinypic.com/2uy4qdw.png&quot; style=&quot;height:110px; margin:10px; width:627px&quot; /&gt;&lt;/p&gt;&lt;p&gt;The host will effectively listen on port 27 for client connections and execute the port listener callback on each connection.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Find the service on the client&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;The client goes through an identical bus setup as the host. Instead of advertising a service it looks for one (given the same service name):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i59.tinypic.com/35jb4pk.png&quot; style=&quot;height:76px; margin:10px; width:628px&quot; /&gt;&lt;/p&gt;&lt;p&gt;For the client the bus listener callback is key because it defines what to do when a service name is found. In this case, when the service is found, we tell the client to join a session with the host:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i62.tinypic.com/21j2dfa.png&quot; style=&quot;height:245px; margin:10px; width:629px&quot; /&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Send, receive and log messages&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Sending and receiving messages is done the same way for host and client. First a shared bus object is created on the bus and each peer subscribes to signals sent to it via a signal handler.&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i61.tinypic.com/259zplc.png&quot; style=&quot;height:306px; margin:10px; width:636px&quot; /&gt;&lt;/p&gt;&lt;p&gt;In order to send messages the peer takes input from stdin and then sends a signal to the shared chat object:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i58.tinypic.com/2dme48w.png&quot; style=&quot;height:305px; margin:10px; width:619px&quot; /&gt;&lt;br /&gt;In order to receive a message each peer has a signal handler that interprets the signal as an incoming message, sends it to the console and does the logging on Kii:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i57.tinypic.com/1126fc4.png&quot; style=&quot;height:452px; margin:10px; width:629px&quot; /&gt;&lt;/p&gt;&lt;p&gt;Please note: In order to store Kii data you’ll need to create a KiiObject from an application scope bucket and set all the details of the incoming message as in a key/value store. After that you can save the object on Kii with an async call and use the Kii Data Browser available on developer.kii.com to see stored messages:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://i58.tinypic.com/291ys5z.png&quot; style=&quot;height:386px; margin:10px; width:626px&quot; /&gt;&lt;br /&gt;That’s about it. Keep in mind that peers interpret messages as text to display on screen but these exchanged messages could be more complex structures, commands, etc. suitable for all kinds of IoT scenarios. Even binary formats could be exchanged and saved on Kii as files.And of course, besides storing data on Kii Cloud you can retrieve it via a powerful query system as easily.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Wrap up&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Getting started with AllJoyn is easy thanks to the npm package with js binding. Since Kii provides JavaScript SDK integration with the binding, you can have an AllJoyn enabled chat service with cloud logging up and running in no time. Keep in mind that peers could easily be IoT devices interpreting the messages as commands to do something meaningful or exchanging richer data such as streaming music (more on that coming to the Kii Blog soon).&lt;/p&gt;&lt;p&gt;Full source code for both the host and client can be found here. Usage is straightforward:&lt;/p&gt;&lt;p&gt; &amp;gt; node peer.js [MODE] [YOUR_APP_ID] [YOUR_APP_KEY] [USERNAME] [PASSWORD]&lt;/p&gt;&lt;p&gt;MODE is either “host” or “client”. Run in host mode first, then open another shell and run the client mode (if you get errors about the address being in use try from another machine on the network since the embedded AllJoyn daemon is then using the same address). Note that you should run only one host but can have as many clients as you want. The parameters YOUR_APP_ID and YOUR_APP_KEY can be obtained by creating an app at developer.kii.com. And you can freely set your username and password, which will be created the first time if credentials don’t exist on Kii. We recommend using a different username for each running script (otherwise all scripts no matter if they are hosts or clients will do the logging as the same Kii user).&lt;/p&gt;&lt;p&gt;Happy coding!&lt;/p&gt;  &lt;/div&gt;
</description>
 <pubDate>Tue, 09 Sep 2014 22:40:14 +0000</pubDate>
 <dc:creator>German Viscuso</dc:creator>
 <guid isPermaLink="false">4050 at https://identity.allseenalliance.org</guid>
 <comments>https://identity.allseenalliance.org/news/blogs/2014/09/get-smart-things-talking-alljoyn-and-kii#comments</comments>
</item>
</channel>
</rss>
