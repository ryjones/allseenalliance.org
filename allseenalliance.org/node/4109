<!DOCTYPE html>
<!--[if IEMobile 7]><html class="iem7" lang="en" dir="ltr"><![endif]-->
<!--[if lte IE 6]><html class="lt-ie9 lt-ie8 lt-ie7" lang="en" dir="ltr"><![endif]-->
<!--[if (IE 7)&(!IEMobile)]><html class="lt-ie9 lt-ie8" lang="en" dir="ltr"><![endif]-->
<!--[if IE 8]><html class="lt-ie9" lang="en" dir="ltr"><![endif]-->
<!--[if (gte IE 9)|(gt IEMobile 7)]><!--><html lang="en" dir="ltr"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/terms/"
  xmlns:foaf="http://xmlns.com/foaf/0.1/"
  xmlns:og="http://ogp.me/ns#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:sioc="http://rdfs.org/sioc/ns#"
  xmlns:sioct="http://rdfs.org/sioc/types#"
  xmlns:skos="http://www.w3.org/2004/02/skos/core#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#"><!--<![endif]-->
<head>
<meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible" />
<meta charset="utf-8" />
<link rel="shortlink" href="/node/4109" />
<link rel="shortcut icon" href="https://identity.allseenalliance.org/sites/all/themes/at_alljoyn/favicon.ico" type="image/vnd.microsoft.icon" />
<meta name="Generator" content="Drupal 7 (http://drupal.org)" />
<link rel="canonical" href="/developers/learn/core/standard-core" />
<meta name="viewport" content="width=device-width" />
<meta name="MobileOptimized" content="width" />
<meta name="HandheldFriendly" content="true" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta property="og:image" content="https://identity.allseenalliance.org/sites/all/themes/at_alljoyn/images/allseen-logo.png"/>
<meta name="google-translate-customization" content="48b015afeed82101-ecae534af0f48252-ga0b6470a6208b2f5-f"></meta>
<meta name="MobileOptimized" content="width">
<meta name="HandheldFriendly" content="true">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>AllJoynÂ® Standard Core - AllSeen Alliance</title>
<link type="text/css" rel="stylesheet" href="https://identity.allseenalliance.org/sites/default/files/css/css_xE-rWrJf-fncB6ztZfd2huxqgxu4WO-qwma6Xer30m4.css" media="all" />
<link type="text/css" rel="stylesheet" href="https://identity.allseenalliance.org/sites/default/files/css/css_7Vcu6qIuRTO46aDOBZp7_mtksGdhCHSe0pjTO2YbGng.css" media="all" />
<link type="text/css" rel="stylesheet" href="https://identity.allseenalliance.org/sites/default/files/css/css_J2n1xiaSuececTK0yC3DT_Msm4PrkPwHizxr0oXGGoo.css" media="all" />
<link type="text/css" rel="stylesheet" href="https://identity.allseenalliance.org/sites/default/files/css/css_oxEtvjMfj8c8EEJJ-1WXLGGntCnC0UvrbYsq0Gw4m4Q.css" media="screen" />
<link type="text/css" rel="stylesheet" href="https://identity.allseenalliance.org/sites/default/files/css/css_9EusV9fcbkpqBeTGdJPl7ru65jm-3ngbTi_D6YRR_5A.css" media="only screen" />
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_UWQINlriydSoeSiGQxToOUdv493zEa7dpsXC1OtYlZU.js"></script>
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_COMsmDyrY9mzVU28X2uGvF4Ba3vd5eTo5xEO7dvCUZM.js"></script>
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_i8oyg1R4On_HyzPiZ5zC3V-DxehjGAcpKwNao5s0s5I.js"></script>
<script>hljs.configure({languages:[]}); hljs.initHighlightingOnLoad();</script>
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_aG0kZAhSHT6G3QC-d9Wwx9gQp5d0em8X6FmMYZ1e5h4.js"></script>
<script>var _gaq = _gaq || [];_gaq.push(["_setAccount", "UA-"]);_gaq.push(["_trackPageview"]);(function() {var ga = document.createElement("script");ga.type = "text/javascript";ga.async = true;ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";var s = document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga, s);})();</script>
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_R35PAK16384fXh7f2OqvXVkbbrwr8ABLrDpR1zTluo0.js"></script>
<script src="https://identity.allseenalliance.org/sites/default/files/js/js_DKtRHJS-jz_cHgf23K7wnIWphCanZ_Rz74Aw-DKQyFs.js"></script>
<script>jQuery.extend(Drupal.settings, {"basePath":"\/","pathPrefix":"","ajaxPageState":{"theme":"at_alljoyn","theme_token":"4kcqaILKElxhT_GFkbdYTmCEBVQ3nZo5tmNj4Sru7ic","js":{"misc\/jquery.js":1,"misc\/jquery.once.js":1,"misc\/drupal.js":1,"sites\/all\/modules\/contrib\/comment_notify\/comment_notify.js":1,"sites\/all\/modules\/alljoyn\/custom_modules\/allseen_docs\/allseen_docs_highlight\/highlightjs\/highlight.min.js":1,"0":1,"sites\/all\/libraries\/colorbox\/jquery.colorbox-min.js":1,"sites\/all\/modules\/contrib\/colorbox\/js\/colorbox.js":1,"sites\/all\/modules\/contrib\/colorbox\/styles\/default\/colorbox_style.js":1,"sites\/all\/modules\/contrib\/colorbox\/js\/colorbox_load.js":1,"sites\/all\/modules\/contrib\/colorbox\/js\/colorbox_inline.js":1,"sites\/all\/modules\/contrib\/panels\/js\/panels.js":1,"sites\/all\/modules\/contrib\/quote\/quote.js":1,"sites\/all\/modules\/contrib\/views_slideshow\/js\/views_slideshow.js":1,"sites\/all\/modules\/contrib\/google_analytics\/googleanalytics.js":1,"1":1,"sites\/all\/modules\/alljoyn\/custom_modules\/allseen_docs\/allseen_docs_nav\/allseen-docs-nav.js":1,"sites\/all\/themes\/at_alljoyn\/scripts\/alljoyn.js":1},"css":{"modules\/system\/system.base.css":1,"modules\/system\/system.menus.css":1,"modules\/system\/system.messages.css":1,"modules\/system\/system.theme.css":1,"sites\/all\/modules\/contrib\/comment_notify\/comment_notify.css":1,"sites\/all\/modules\/ldap\/ldap_user\/ldap_user.css":1,"modules\/book\/book.css":1,"modules\/comment\/comment.css":1,"sites\/all\/modules\/contrib\/date\/date_api\/date.css":1,"sites\/all\/modules\/contrib\/date\/date_popup\/themes\/datepicker.1.7.css":1,"modules\/field\/theme\/field.css":1,"sites\/all\/modules\/contrib\/mollom\/mollom.css":1,"modules\/node\/node.css":1,"modules\/user\/user.css":1,"modules\/forum\/forum.css":1,"sites\/all\/modules\/contrib\/views\/css\/views.css":1,"sites\/all\/modules\/alljoyn\/custom_modules\/allseen_docs\/allseen_docs_highlight\/highlightjs\/default.min.css":1,"sites\/all\/modules\/contrib\/colorbox\/styles\/default\/colorbox_style.css":1,"sites\/all\/modules\/contrib\/ctools\/css\/ctools.css":1,"sites\/all\/modules\/ldap\/ldap_servers\/ldap_servers.admin.css":1,"sites\/all\/modules\/contrib\/panels\/css\/panels.css":1,"sites\/all\/modules\/contrib\/quote\/quote.css":1,"sites\/all\/modules\/contrib\/views_slideshow\/views_slideshow.css":1,"sites\/all\/modules\/alljoyn\/custom_modules\/allseen_docs\/allseen_docs_nav\/allseen-docs-nav.css":1,"sites\/all\/modules\/alljoyn\/features\/content_type_developer_document\/content-type-developer-document.css":1,"sites\/all\/themes\/adaptivetheme\/at_core\/css\/at.layout.css":1,"sites\/all\/themes\/at_alljoyn\/css\/fonts.css":1,"sites\/all\/themes\/at_alljoyn\/css\/globals.css":1,"sites\/all\/themes\/at_alljoyn\/css\/jcarousel-alljoyn.css":1,"public:\/\/adaptivetheme\/at_alljoyn_files_7dbe1ef5\/at_alljoyn.responsive.layout.css":1,"public:\/\/adaptivetheme\/at_alljoyn_files_7dbe1ef5\/at_alljoyn.responsive.styles.css":1}},"colorbox":{"opacity":"0.85","current":"{current} of {total}","previous":"\u00ab Prev","next":"Next \u00bb","close":"Close","maxWidth":"98%","maxHeight":"98%","fixed":true,"mobiledetect":true,"mobiledevicewidth":"480px"},"jcarousel":{"ajaxPath":"\/jcarousel\/ajax\/views"},"quote_nest":2,"googleanalytics":{"trackOutbound":1,"trackMailto":1,"trackDownload":1,"trackDownloadExtensions":"7z|aac|arc|arj|asf|asx|avi|bin|csv|doc|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls|xml|z|zip"}});</script>
<!--[if lt IE 9]>
<script src="https://identity.allseenalliance.org/sites/all/themes/adaptivetheme/at_core/scripts/respond.js?nwgww1"></script>
<script src="https://identity.allseenalliance.org/sites/all/themes/adaptivetheme/at_core/scripts/html5.js?nwgww1"></script>
<script src="https://identity.allseenalliance.org/sites/all/themes/adaptivetheme/at_core/scripts/PIE.htc?nwgww1"></script>
<script src="https://identity.allseenalliance.org/sites/all/themes/adaptivetheme/at_core/scripts/selectivizr.js?nwgww1"></script>
<![endif]-->
</head>
<body class="html not-front not-logged-in one-sidebar sidebar-first page-node page-node- page-node-4109 node-type-developer-document site-name-hidden with-subnav page-developers-learn-core-standard-core section-developers">
  <div id="body-top">
      </div>
  <div id="skip-link">
    <a href="#main-content" class="element-invisible element-focusable">Skip to main content</a>
  </div>
  <div class="region region-page-top"><div class="region-inner clearfix"><div id="fb-root"></div><script type="text/javascript">
     window.fbAsyncInit = function() {
       FB.init({
         appId: "492099574180957",
         status: true,
         cookie: true,
         xfbml: true,
         oauth : true,
         channelUrl: "https:\/\/identity.allseenalliance.org\/service_links\/channel"
         });

         FB.Event.subscribe('edge.create', function(href, widget) {
    _gaq.push(['_trackEvent', 'facebook', 'Facebook like', href]);
   });FB.Event.subscribe('edge.remove', function(href, widget) {
    _gaq.push(['_trackEvent', 'facebook', 'Facebook unlike', href]);
   });
       };
       (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = '//connect.facebook.net/en_US/all.js';
     ref.parentNode.insertBefore(js, ref);
   }(document));
    </script></div></div>  
<div id="wrap">

  <div id="lfcollabprojects-header">
    <div class="gray-diagonal">
      <div class="header-inner">
        <a id="lfcollabprojects-logo" href="http://collabprojects.linuxfoundation.org">Linux Foundation Collaborative Projects</a>
      </div>
    </div>
  </div>

  <div id="page" class="container page">

    
    <header id="header" class="clearfix" role="banner">

      <div class="region region-header"><div class="region-inner clearfix"><div id="block-block-19" class="block block-block" ><div class="block-inner clearfix">        <div class="block-content content"><br /><br /><br /><br /><br /><br /><br /></div></div></div></div></div>
              <div id="branding" class="branding-elements clearfix">

                      <div id="logo"><a href="/" title="Home page"><img class="site-logo" typeof="foaf:Image" src="https://identity.allseenalliance.org/sites/default/files/logo.png" alt="AllSeen Alliance" /></a></div>
          
                      <hgroup id="name-and-slogan" class="element-invisible">
                              <h1 id="site-name" class="element-invisible"><a href="/" title="Home page">AllSeen Alliance</a></h1>
                                        </hgroup>
          
          <!--main menu-->
          <a id="main-menu-toggle" href="#">Site Sections</a>
  		  		  		
        </div>
      
    </header>


    <div id="columns" class="clearfix">
      <div id="sub-menu-bar">
        <div class="region region-sub-menu-bar"><div class="region-inner clearfix"><div id="block-menu-block-allseen-docs-nav" class="block block-menu-block"  role="navigation"><div class="block-inner clearfix">        <div class="block-content content"><div class="menu-block-wrapper menu-block-allseen-docs-nav menu-name-main-menu parent-mlid-0 menu-level-2">
  <ul class="menu clearfix"><li class="first has-children active-trail menu-mlid-2504 menu-item-2504"><a href="/developers/learn" class="active-trail">Learn</a></li><li class="has-children menu-mlid-2539 menu-item-2539"><a href="/developers/download">Download</a></li><li class="has-children menu-mlid-2541 menu-item-2541"><a href="/developers/develop">Develop</a></li><li class="last has-children menu-mlid-2636 menu-item-2636"><a href="/developers/contribute">Contribute</a></li></ul></div>
</div></div></div><section id="block-menu-block-allseen-docs-responsive-nav" class="block block-menu-block"  role="navigation"><div class="block-inner clearfix">        <div class="block-title-wrapper">
      <h2 class="block-title">Menu</h2>
    </div>
      <div class="block-content content"><div class="menu-block-wrapper menu-block-allseen-docs-responsive-nav menu-name-main-menu parent-mlid-0 menu-level-1">
  <ul class="menu clearfix"><li class="first menu-parent menu-mlid-1994 menu-item-1994"><a href="/about">About</a><ul class="menu clearfix"><li class="first menu-mlid-2486 menu-item-2486"><a href="/about/why-allseen">Why AllSeen</a></li><li class="menu-mlid-2464 menu-item-2464"><a href="/about/get-involved">Get Involved</a></li><li class="collapsed menu-mlid-2446 menu-item-2446"><a href="/about/governance/ip-policy">IP Policy</a></li><li class="menu-mlid-2491 menu-item-2491"><a href="/about/working-groups">Working Groups</a></li><li class="menu-mlid-2286 menu-item-2286"><a href="/about/members">Member Companies</a></li><li class="menu-mlid-2285 menu-item-2285"><a href="/about/join-allseen-alliance">Join The AllSeen Alliance</a></li><li class="collapsed menu-mlid-2447 menu-item-2447"><a href="/about/governance">Governance</a></li><li class="menu-mlid-501 menu-item-501"><a href="/about/faqs">FAQs</a></li><li class="menu-mlid-2322 menu-item-2322"><a href="/about/contact">Contact Us</a></li><li class="menu-mlid-2282 menu-item-2282"><a href="/allseen/what-is-allseen-alliance">What is AllSeen Alliance?</a></li><li class="last menu-mlid-2490 menu-item-2490"><a href="https://wiki.allseenalliance.org/members_private/start?do=login&amp;sectok=34485854163fe6a0be457198139e2c84" title="Members Area" id="members_area" name="Members Area" rel="nofollow" target="_blank">Members Area</a></li></ul></li><li class="menu-parent active-trail menu-mlid-2503 menu-item-2503"><a href="/developers" class="active-trail">Developers</a><ul class="menu clearfix"><li class="first menu-parent has-children active-trail menu-mlid-2504 menu-item-2504"><a href="/developers/learn" class="active-trail active-trail">Learn</a><ul class="menu clearfix"><li class="first menu-mlid-2505 menu-item-2505"><a href="/developers/learn/use-cases">Use Cases</a></li><li class="menu-mlid-2506 menu-item-2506"><a href="/developers/learn/architecture">Architecture</a></li><li class="menu-parent active-trail menu-mlid-2507 menu-item-2507"><a href="/developers/learn/core" class="active-trail">Core Framework</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2508 menu-item-2508"><a href="/developers/learn/core/about-announcement">About Announcement</a><ul class="menu clearfix"><li class="first menu-mlid-2509 menu-item-2509"><a href="/developers/learn/core/about-announcement/interface">Interface</a></li><li class="last menu-mlid-2510 menu-item-2510"><a href="/developers/learn/core/about-announcement/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-mlid-2511 menu-item-2511"><a href="/developers/learn/core/events-and-actions">Events and Actions</a></li><li class="menu-mlid-2992 menu-item-2992"><a href="/developers/learn/core/rn_config">Routing Node Configuration</a></li><li class="active-trail active menu-mlid-2512 menu-item-2512"><a href="/developers/learn/core/standard-core" class="active-trail active">Standard Core</a></li><li class="menu-mlid-2513 menu-item-2513"><a href="/developers/learn/core/thin-core">Thin Core</a></li><li class="menu-parent menu-mlid-2514 menu-item-2514"><a href="/developers/learn/core/system-description">System Description</a><ul class="menu clearfix"><li class="first menu-mlid-2515 menu-item-2515"><a href="/developers/learn/core/system-description/system-architecture">System Architecture</a></li><li class="menu-mlid-2516 menu-item-2516"><a href="/developers/learn/core/system-description/advertisement-discovery">Advertisement and Discovery</a></li><li class="menu-mlid-2645 menu-item-2645"><a href="/developers/learn/core/system-description/alljoyn-transport">AllJoyn Transport</a></li><li class="menu-mlid-2517 menu-item-2517"><a href="/developers/learn/core/system-description/data-exchange">Data Exchange</a></li><li class="menu-mlid-2518 menu-item-2518"><a href="/developers/learn/core/system-description/alljoyn-session">AllJoyn Session</a></li><li class="menu-mlid-2519 menu-item-2519"><a href="/developers/learn/core/system-description/sessionless-signal">Sessionless Signal</a></li><li class="menu-mlid-2520 menu-item-2520"><a href="/developers/learn/core/system-description/alljoyn-security">AllJoyn Security</a></li><li class="menu-mlid-2521 menu-item-2521"><a href="/developers/learn/core/system-description/thin-apps">Thin Apps</a></li><li class="last menu-mlid-2522 menu-item-2522"><a href="/developers/learn/core/system-description/events-actions">Events and Actions</a></li></ul></li><li class="last menu-parent menu-mlid-2937 menu-item-2937"><a href="/developers/learn/core/security2_0">Security 2.0</a><ul class="menu clearfix"><li class="first last menu-mlid-2938 menu-item-2938"><a href="/developers/learn/core/security2_0/hld">High-Level Design</a></li></ul></li></ul></li><li class="menu-parent menu-mlid-2523 menu-item-2523"><a href="/developers/learn/base-services">Base Services</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2524 menu-item-2524"><a href="/developers/learn/base-services/onboarding">Onboarding</a><ul class="menu clearfix"><li class="first menu-mlid-2525 menu-item-2525"><a href="/developers/learn/base-services/onboarding/interface">Interface</a></li><li class="last menu-mlid-2526 menu-item-2526"><a href="/developers/learn/base-services/onboarding/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2527 menu-item-2527"><a href="/developers/learn/base-services/configuration">Configuration</a><ul class="menu clearfix"><li class="first menu-mlid-2528 menu-item-2528"><a href="/developers/learn/base-services/configuration/interface">Interface</a></li><li class="last menu-mlid-2529 menu-item-2529"><a href="/developers/learn/base-services/configuration/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2530 menu-item-2530"><a href="/developers/learn/base-services/notification">Notification</a><ul class="menu clearfix"><li class="first menu-mlid-2531 menu-item-2531"><a href="/developers/learn/base-services/notification/interface">Interface</a></li><li class="last menu-mlid-2532 menu-item-2532"><a href="/developers/learn/base-services/notification/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2533 menu-item-2533"><a href="/developers/learn/base-services/controlpanel">ControlPanel</a><ul class="menu clearfix"><li class="first menu-mlid-2534 menu-item-2534"><a href="/developers/learn/base-services/controlpanel/interface">Interface</a></li><li class="last menu-mlid-2535 menu-item-2535"><a href="/developers/learn/base-services/controlpanel/interface-14-02">Interface 14.02</a></li></ul></li><li class="last menu-parent menu-mlid-2536 menu-item-2536"><a href="/developers/learn/base-services/audiostreaming">Audio Streaming</a><ul class="menu clearfix"><li class="first last menu-mlid-2537 menu-item-2537"><a href="/developers/learn/base-services/audiostreaming/interface">Interface</a></li></ul></li></ul></li><li class="last menu-mlid-2538 menu-item-2538"><a href="/developers/learn/glossary">Glossary</a></li></ul></li><li class="menu-parent has-children menu-mlid-2539 menu-item-2539"><a href="/developers/download">Download</a><ul class="menu clearfix"><li class="first last menu-mlid-2540 menu-item-2540"><a href="/developers/download/supported-platforms">Supported Platforms</a></li></ul></li><li class="menu-parent has-children menu-mlid-2541 menu-item-2541"><a href="/developers/develop">Develop</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2542 menu-item-2542"><a href="/developers/develop/building">Building</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2543 menu-item-2543"><a href="/developers/develop/building/android">Android</a><ul class="menu clearfix"><li class="first last menu-mlid-2544 menu-item-2544"><a href="/developers/develop/building/android/build-source">Build Source</a></li></ul></li><li class="menu-parent menu-mlid-2545 menu-item-2545"><a href="/developers/develop/building/linux">Linux</a><ul class="menu clearfix"><li class="first menu-mlid-2546 menu-item-2546"><a href="/developers/develop/building/linux/openwrt">OpenWRT</a></li><li class="last menu-mlid-2547 menu-item-2547"><a href="/developers/develop/building/linux/build-source">Build Source</a></li></ul></li><li class="menu-parent menu-mlid-2548 menu-item-2548"><a href="/developers/develop/building/ios-osx">iOS/OS X</a><ul class="menu clearfix"><li class="first last menu-mlid-2549 menu-item-2549"><a href="/developers/develop/building/ios-osx/build-source">Build Source</a></li></ul></li><li class="menu-parent menu-mlid-2550 menu-item-2550"><a href="/developers/develop/building/windows">Windows</a><ul class="menu clearfix"><li class="first last menu-mlid-2551 menu-item-2551"><a href="/developers/develop/building/windows/build-source">Build Source</a></li></ul></li><li class="menu-mlid-2552 menu-item-2552"><a href="/developers/develop/building/thin-linux">Thin - Linux</a></li><li class="menu-mlid-2553 menu-item-2553"><a href="/developers/develop/building/thin-windows">Thin - Windows</a></li><li class="last menu-mlid-2993 menu-item-2993"><a href="/developers/develop/building/alljoyn-js">AllJoyn.js</a></li></ul></li><li class="menu-parent menu-mlid-2554 menu-item-2554"><a href="/developers/develop/run-sample-apps">Running Samples</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2555 menu-item-2555"><a href="/developers/develop/run-sample-apps/basic">Basic</a><ul class="menu clearfix"><li class="first menu-mlid-2556 menu-item-2556"><a href="/developers/develop/run-sample-apps/basic/android">Android</a></li><li class="menu-mlid-2557 menu-item-2557"><a href="/developers/develop/run-sample-apps/basic/linux">Linux</a></li><li class="menu-mlid-2558 menu-item-2558"><a href="/developers/develop/run-sample-apps/basic/ios-osx">iOS/OS X</a></li><li class="menu-mlid-2559 menu-item-2559"><a href="/developers/develop/run-sample-apps/basic/windows">Windows</a></li><li class="menu-mlid-2560 menu-item-2560"><a href="/developers/develop/run-sample-apps/basic/thin-linux">Thin - Linux</a></li><li class="last menu-mlid-2561 menu-item-2561"><a href="/developers/develop/run-sample-apps/basic/thin-windows">Thin - Windows</a></li></ul></li><li class="menu-parent menu-mlid-2562 menu-item-2562"><a href="/developers/develop/run-sample-apps/chat">Chat</a><ul class="menu clearfix"><li class="first menu-mlid-2563 menu-item-2563"><a href="/developers/develop/run-sample-apps/chat/android">Android</a></li><li class="menu-mlid-2564 menu-item-2564"><a href="/developers/develop/run-sample-apps/chat/linux">Linux</a></li><li class="menu-mlid-2565 menu-item-2565"><a href="/developers/develop/run-sample-apps/chat/ios-osx">iOS/OS X</a></li><li class="menu-mlid-2566 menu-item-2566"><a href="/developers/develop/run-sample-apps/chat/windows">Windows</a></li><li class="last menu-mlid-2567 menu-item-2567"><a href="/developers/develop/run-sample-apps/chat/thin-linux">Thin - Linux</a></li></ul></li><li class="menu-parent menu-mlid-2568 menu-item-2568"><a href="/developers/develop/run-sample-apps/about">About</a><ul class="menu clearfix"><li class="first menu-mlid-2569 menu-item-2569"><a href="/developers/develop/run-sample-apps/about/linux">Linux</a></li><li class="menu-mlid-2570 menu-item-2570"><a href="/developers/develop/run-sample-apps/about/ios-osx">iOS/OS X</a></li><li class="last menu-mlid-2646 menu-item-2646"><a href="/developers/develop/run-sample-apps/about/windows">Windows</a></li></ul></li><li class="menu-mlid-2934 menu-item-2934"><a href="/developers/develop/run-sample-apps/observer">Observer</a></li><li class="menu-parent menu-mlid-2571 menu-item-2571"><a href="/developers/develop/run-sample-apps/config">Config</a><ul class="menu clearfix"><li class="first menu-mlid-2572 menu-item-2572"><a href="/developers/develop/run-sample-apps/config/android">Android</a></li><li class="menu-mlid-2573 menu-item-2573"><a href="/developers/develop/run-sample-apps/config/linux">Linux</a></li><li class="menu-mlid-2574 menu-item-2574"><a href="/developers/develop/run-sample-apps/config/ios-osx">iOS/OS X</a></li><li class="last menu-mlid-2575 menu-item-2575"><a href="/developers/develop/run-sample-apps/config/thin-linux">Thin - Linux</a></li></ul></li><li class="menu-parent menu-mlid-2576 menu-item-2576"><a href="/developers/develop/run-sample-apps/controlpanel">Control Panel</a><ul class="menu clearfix"><li class="first menu-mlid-2577 menu-item-2577"><a href="/developers/develop/run-sample-apps/controlpanel/android">Android</a></li><li class="menu-mlid-2578 menu-item-2578"><a href="/developers/develop/run-sample-apps/controlpanel/linux">Linux</a></li><li class="menu-mlid-2579 menu-item-2579"><a href="/developers/develop/run-sample-apps/controlpanel/ios-osx">iOS/OS X</a></li><li class="last menu-mlid-2580 menu-item-2580"><a href="/developers/develop/run-sample-apps/controlpanel/thin-linux">Thin - Linux</a></li></ul></li><li class="menu-parent menu-mlid-2581 menu-item-2581"><a href="/developers/develop/run-sample-apps/notification">Notification</a><ul class="menu clearfix"><li class="first menu-mlid-2582 menu-item-2582"><a href="/developers/develop/run-sample-apps/notification/android">Android</a></li><li class="menu-mlid-2583 menu-item-2583"><a href="/developers/develop/run-sample-apps/notification/linux">Linux</a></li><li class="menu-mlid-2584 menu-item-2584"><a href="/developers/develop/run-sample-apps/notification/ios-osx">iOS/OS X</a></li><li class="last menu-mlid-2585 menu-item-2585"><a href="/developers/develop/run-sample-apps/notification/thin-linux">Thin - Linux</a></li></ul></li><li class="menu-parent menu-mlid-2586 menu-item-2586"><a href="/developers/develop/run-sample-apps/onboarding">Onboarding</a><ul class="menu clearfix"><li class="first menu-mlid-2587 menu-item-2587"><a href="/developers/develop/run-sample-apps/onboarding/android">Android</a></li><li class="menu-mlid-2588 menu-item-2588"><a href="/developers/develop/run-sample-apps/onboarding/linux">Linux</a></li><li class="last menu-mlid-2589 menu-item-2589"><a href="/developers/develop/run-sample-apps/onboarding/ios-osx">iOS/OS X</a></li></ul></li><li class="menu-parent menu-mlid-2590 menu-item-2590"><a href="/developers/develop/run-sample-apps/acserver">AC Server</a><ul class="menu clearfix"><li class="first menu-mlid-2591 menu-item-2591"><a href="/developers/develop/run-sample-apps/acserver/linux">Linux</a></li><li class="last menu-mlid-2592 menu-item-2592"><a href="/developers/develop/run-sample-apps/acserver/thin-linux">Thin - Linux</a></li></ul></li><li class="menu-parent menu-mlid-2593 menu-item-2593"><a href="/developers/develop/run-sample-apps/test">Command Line Apps</a><ul class="menu clearfix"><li class="first last menu-mlid-2594 menu-item-2594"><a href="/developers/develop/run-sample-apps/test/sessions">Sessions</a></li></ul></li><li class="last menu-mlid-2994 menu-item-2994"><a href="/developers/develop/run-sample-apps/alljoyn-js">AllJoyn.js</a></li></ul></li><li class="menu-parent menu-mlid-2595 menu-item-2595"><a href="/developers/develop/api-guide">API Guide</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2596 menu-item-2596"><a href="/developers/develop/api-guide/core">Core</a><ul class="menu clearfix"><li class="first menu-mlid-2939 menu-item-2939"><a href="/developers/develop/api-guide/core/java">java</a></li><li class="menu-mlid-2940 menu-item-2940"><a href="/developers/develop/api-guide/core/objc">Objective-C</a></li><li class="menu-mlid-2647 menu-item-2647"><a href="/developers/develop/api-guide/core/alljoyn-transports-best-practices">Alljoyn Transports Best Practices</a></li><li class="menu-mlid-2648 menu-item-2648"><a href="/developers/develop/api-guide/core/auto-ping">AutoPinger</a></li><li class="menu-mlid-2935 menu-item-2935"><a href="/developers/develop/api-guide/core/observer">Observer</a></li><li class="last menu-mlid-2936 menu-item-2936"><a href="/developers/develop/api-guide/core/propcache">Property Cache</a></li></ul></li><li class="menu-parent menu-mlid-2599 menu-item-2599"><a href="/developers/develop/api-guide/about">About</a><ul class="menu clearfix"><li class="first menu-mlid-2941 menu-item-2941"><a href="/developers/develop/api-guide/about/java">java</a></li><li class="menu-mlid-2942 menu-item-2942"><a href="/developers/develop/api-guide/about/cpp">C++</a></li><li class="menu-mlid-2943 menu-item-2943"><a href="/developers/develop/api-guide/about/objc">Objective-C</a></li><li class="menu-mlid-2944 menu-item-2944"><a href="/developers/develop/api-guide/about/c-thin">C (Thin Core)</a></li><li class="menu-mlid-2945 menu-item-2945"><a href="/developers/develop/api-guide/about/java-legacy">java Legacy</a></li><li class="menu-mlid-2946 menu-item-2946"><a href="/developers/develop/api-guide/about/cpp-legacy">C++ Legacy</a></li><li class="last menu-mlid-2947 menu-item-2947"><a href="/developers/develop/api-guide/about/objc-legacy">Objective-C Legacy</a></li></ul></li><li class="menu-parent menu-mlid-2604 menu-item-2604"><a href="/developers/develop/api-guide/onboarding">Onboarding</a><ul class="menu clearfix"><li class="first menu-mlid-2948 menu-item-2948"><a href="/developers/develop/api-guide/onboarding/java">java</a></li><li class="last menu-mlid-2949 menu-item-2949"><a href="/developers/develop/api-guide/onboarding/objc">Objective-C</a></li></ul></li><li class="menu-parent menu-mlid-2607 menu-item-2607"><a href="/developers/develop/api-guide/config">Configuration</a><ul class="menu clearfix"><li class="first menu-mlid-2950 menu-item-2950"><a href="/developers/develop/api-guide/config/java">java</a></li><li class="menu-mlid-2951 menu-item-2951"><a href="/developers/develop/api-guide/config/cpp">C++</a></li><li class="menu-mlid-2952 menu-item-2952"><a href="/developers/develop/api-guide/config/objc">Objective-C</a></li><li class="last menu-mlid-2953 menu-item-2953"><a href="/developers/develop/api-guide/config/c-thin">C (Thin Core)</a></li></ul></li><li class="menu-parent menu-mlid-2612 menu-item-2612"><a href="/developers/develop/api-guide/notification">Notification</a><ul class="menu clearfix"><li class="first menu-mlid-2954 menu-item-2954"><a href="/developers/develop/api-guide/notification/java">java</a></li><li class="menu-mlid-2955 menu-item-2955"><a href="/developers/develop/api-guide/notification/cpp">C++</a></li><li class="menu-mlid-2956 menu-item-2956"><a href="/developers/develop/api-guide/notification/objc">Objective-C</a></li><li class="last menu-mlid-2957 menu-item-2957"><a href="/developers/develop/api-guide/notification/c-thin">C (Thin Core)</a></li></ul></li><li class="menu-parent menu-mlid-2617 menu-item-2617"><a href="/developers/develop/api-guide/controlpanel">Control Panel</a><ul class="menu clearfix"><li class="first menu-mlid-2958 menu-item-2958"><a href="/developers/develop/api-guide/controlpanel/java">java</a></li><li class="menu-mlid-2959 menu-item-2959"><a href="/developers/develop/api-guide/controlpanel/cpp">C++</a></li><li class="menu-mlid-2960 menu-item-2960"><a href="/developers/develop/api-guide/controlpanel/objc">Objective-C</a></li><li class="last menu-mlid-2961 menu-item-2961"><a href="/developers/develop/api-guide/controlpanel/c-thin">C (Thin Core)</a></li></ul></li><li class="menu-parent menu-mlid-2622 menu-item-2622"><a href="/developers/develop/api-guide/audio-streaming">Audio Streaming</a><ul class="menu clearfix"><li class="first last menu-mlid-2962 menu-item-2962"><a href="/developers/develop/api-guide/audio-streaming/cpp">C++</a></li></ul></li><li class="last menu-mlid-2624 menu-item-2624"><a href="/developers/develop/api-guide/events-and-actions">Events and Actions</a></li></ul></li><li class="menu-mlid-2625 menu-item-2625"><a href="/developers/develop/api-reference">API Reference</a></li><li class="menu-parent menu-mlid-2626 menu-item-2626"><a href="/developers/develop/debug">Debug</a><ul class="menu clearfix"><li class="first last menu-mlid-2627 menu-item-2627"><a href="/developers/develop/debug/common-issues">Common Issues</a></li></ul></li><li class="menu-parent menu-mlid-2628 menu-item-2628"><a href="/developers/develop/tutorial">Tutorial</a><ul class="menu clearfix"><li class="first menu-mlid-2629 menu-item-2629"><a href="/developers/develop/tutorial/core">Core</a></li><li class="menu-mlid-2630 menu-item-2630"><a href="/developers/develop/tutorial/ios">iOS</a></li><li class="menu-mlid-2631 menu-item-2631"><a href="/developers/develop/tutorial/thin-app">Thin App</a></li><li class="menu-mlid-2632 menu-item-2632"><a href="/developers/develop/tutorial/arduino-and-gt202">Arduino + GT202</a></li><li class="last menu-mlid-2633 menu-item-2633"><a href="/developers/develop/tutorial/videos">Videos</a></li></ul></li><li class="last menu-mlid-2634 menu-item-2634"><a href="/developers/develop/ask">Ask Forum</a></li></ul></li><li class="last menu-parent has-children menu-mlid-2636 menu-item-2636"><a href="/developers/contribute">Contribute</a><ul class="menu clearfix"><li class="first last menu-mlid-2637 menu-item-2637"><a href="/developers/contribute/project-lifecycle">Project Lifecycle</a></li></ul></li></ul></li><li class="menu-mlid-2466 menu-item-2466"><a href="/showcase-products-using-alljoyn">Showcase</a></li><li class="menu-parent menu-mlid-2487 menu-item-2487"><a href="/allseen-alliance-certification">Certification</a><ul class="menu clearfix"><li class="first menu-mlid-2488 menu-item-2488"><a href="/certification/how-validate-your-designed-allseen-product">How To Validate Your Product</a></li><li class="last menu-mlid-2489 menu-item-2489"><a href="/certification/faq">FAQ</a></li></ul></li><li class="last menu-parent menu-mlid-2421 menu-item-2421"><a href="/news-and-events">News &amp; Events</a><ul class="menu clearfix"><li class="first menu-mlid-2422 menu-item-2422"><a href="/news-and-events/newsroom/announcements">Announcements</a></li><li class="menu-mlid-2449 menu-item-2449"><a href="/news/videos">Videos</a></li><li class="menu-mlid-2423 menu-item-2423"><a href="/news-and-events/newsroom/in-the-news">In The News</a></li><li class="menu-mlid-2424 menu-item-2424"><a href="/news-and-events/events">Events</a></li><li class="menu-mlid-2448 menu-item-2448"><a href="/news-and-events/blogs">Blogs</a></li><li class="menu-mlid-2461 menu-item-2461"><a href="/news-and-events/newsletters">Newsletters</a></li><li class="last menu-mlid-2933 menu-item-2933"><a href="/news-and-events/videos">Videos</a></li></ul></li></ul></div>
</div></div></section></div></div>      </div>
            
      
      <div class="region region-sidebar-first sidebar"><div class="region-inner clearfix"><div id="block-menu-block-1" class="block block-menu-block"  role="navigation"><div class="block-inner clearfix">        <div class="block-content content"><div class="menu-block-wrapper menu-block-1 menu-name-main-menu parent-mlid-0 menu-level-3">
  <ul class="menu clearfix"><li class="first menu-mlid-2505 menu-item-2505"><a href="/developers/learn/use-cases">Use Cases</a></li><li class="menu-mlid-2506 menu-item-2506"><a href="/developers/learn/architecture">Architecture</a></li><li class="menu-parent active-trail menu-mlid-2507 menu-item-2507"><a href="/developers/learn/core" class="active-trail">Core Framework</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2508 menu-item-2508"><a href="/developers/learn/core/about-announcement">About Announcement</a><ul class="menu clearfix"><li class="first menu-mlid-2509 menu-item-2509"><a href="/developers/learn/core/about-announcement/interface">Interface</a></li><li class="last menu-mlid-2510 menu-item-2510"><a href="/developers/learn/core/about-announcement/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-mlid-2511 menu-item-2511"><a href="/developers/learn/core/events-and-actions">Events and Actions</a></li><li class="menu-mlid-2992 menu-item-2992"><a href="/developers/learn/core/rn_config">Routing Node Configuration</a></li><li class="active-trail active menu-mlid-2512 menu-item-2512"><a href="/developers/learn/core/standard-core" class="active-trail active">Standard Core</a></li><li class="menu-mlid-2513 menu-item-2513"><a href="/developers/learn/core/thin-core">Thin Core</a></li><li class="menu-parent menu-mlid-2514 menu-item-2514"><a href="/developers/learn/core/system-description">System Description</a><ul class="menu clearfix"><li class="first menu-mlid-2515 menu-item-2515"><a href="/developers/learn/core/system-description/system-architecture">System Architecture</a></li><li class="menu-mlid-2516 menu-item-2516"><a href="/developers/learn/core/system-description/advertisement-discovery">Advertisement and Discovery</a></li><li class="menu-mlid-2645 menu-item-2645"><a href="/developers/learn/core/system-description/alljoyn-transport">AllJoyn Transport</a></li><li class="menu-mlid-2517 menu-item-2517"><a href="/developers/learn/core/system-description/data-exchange">Data Exchange</a></li><li class="menu-mlid-2518 menu-item-2518"><a href="/developers/learn/core/system-description/alljoyn-session">AllJoyn Session</a></li><li class="menu-mlid-2519 menu-item-2519"><a href="/developers/learn/core/system-description/sessionless-signal">Sessionless Signal</a></li><li class="menu-mlid-2520 menu-item-2520"><a href="/developers/learn/core/system-description/alljoyn-security">AllJoyn Security</a></li><li class="menu-mlid-2521 menu-item-2521"><a href="/developers/learn/core/system-description/thin-apps">Thin Apps</a></li><li class="last menu-mlid-2522 menu-item-2522"><a href="/developers/learn/core/system-description/events-actions">Events and Actions</a></li></ul></li><li class="last menu-parent menu-mlid-2937 menu-item-2937"><a href="/developers/learn/core/security2_0">Security 2.0</a><ul class="menu clearfix"><li class="first last menu-mlid-2938 menu-item-2938"><a href="/developers/learn/core/security2_0/hld">High-Level Design</a></li></ul></li></ul></li><li class="menu-parent menu-mlid-2523 menu-item-2523"><a href="/developers/learn/base-services">Base Services</a><ul class="menu clearfix"><li class="first menu-parent menu-mlid-2524 menu-item-2524"><a href="/developers/learn/base-services/onboarding">Onboarding</a><ul class="menu clearfix"><li class="first menu-mlid-2525 menu-item-2525"><a href="/developers/learn/base-services/onboarding/interface">Interface</a></li><li class="last menu-mlid-2526 menu-item-2526"><a href="/developers/learn/base-services/onboarding/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2527 menu-item-2527"><a href="/developers/learn/base-services/configuration">Configuration</a><ul class="menu clearfix"><li class="first menu-mlid-2528 menu-item-2528"><a href="/developers/learn/base-services/configuration/interface">Interface</a></li><li class="last menu-mlid-2529 menu-item-2529"><a href="/developers/learn/base-services/configuration/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2530 menu-item-2530"><a href="/developers/learn/base-services/notification">Notification</a><ul class="menu clearfix"><li class="first menu-mlid-2531 menu-item-2531"><a href="/developers/learn/base-services/notification/interface">Interface</a></li><li class="last menu-mlid-2532 menu-item-2532"><a href="/developers/learn/base-services/notification/interface-14-02">Interface 14.02</a></li></ul></li><li class="menu-parent menu-mlid-2533 menu-item-2533"><a href="/developers/learn/base-services/controlpanel">ControlPanel</a><ul class="menu clearfix"><li class="first menu-mlid-2534 menu-item-2534"><a href="/developers/learn/base-services/controlpanel/interface">Interface</a></li><li class="last menu-mlid-2535 menu-item-2535"><a href="/developers/learn/base-services/controlpanel/interface-14-02">Interface 14.02</a></li></ul></li><li class="last menu-parent menu-mlid-2536 menu-item-2536"><a href="/developers/learn/base-services/audiostreaming">Audio Streaming</a><ul class="menu clearfix"><li class="first last menu-mlid-2537 menu-item-2537"><a href="/developers/learn/base-services/audiostreaming/interface">Interface</a></li></ul></li></ul></li><li class="last menu-mlid-2538 menu-item-2538"><a href="/developers/learn/glossary">Glossary</a></li></ul></div>
</div></div></div></div></div>            <div id="content-column" role="main">
        <div class="content-inner">

          
          <section id="main-content">

                                      <header id="main-content-header">

                                                  <h1 id="sub-title">
                    AllJoynÂ® Standard Core                  </h1>
                
                
              </header>
                        
                          <div id="content">
                        <article id="node-4109" class="node node-developer-document article clearfix" about="/developers/learn/core/standard-core" typeof="sioc:Item foaf:Document" role="article">

  
      <span property="dc:title" content="AllJoynÂ® Standard Core" class="rdf-meta element-hidden"></span><span property="sioc:num_replies" content="0" datatype="xsd:integer" class="rdf-meta element-hidden"></span>
  
  <div class="node-content">
  
  <div class="field-body view-mode-full">
    
<h2 id="overview">Overview</h2>
<p>The AllJoyn framework is an open-source software system that 
provides an environment for distributed applications running 
across different device classes with an emphasis on mobility, 
security, and dynamic configuration. The AllJoyn system handles 
the hard problems inherent in heterogeneous distributed systems 
and addresses the unique issues that arise when mobility enters 
the equation. This leaves application developers free to concentrate 
on the core problems of the application they are building.</p>
<p>The AllJoyn framework is "platform-neutral", meaning it was designed 
to be as independent as possible of the specifics of the operating 
system, hardware, and software of the device on which it is running. 
fact, the AllJoyn framework was developed to run on Microsoft Windows, 
Linux, Android, iOS, OS X, OpenWRT, and as a Unity plug-in for the 
Unity game development ecosystem.</p>
<p>The AllJoyn framework is designed with the concept of proximity and 
mobility always in mind. In a mobile environment, devices will constantly 
be entering and leaving the proximity of other devices, and underlying 
network capacities can be changing as well.</p>
<p>The AllJoyn SDKs are available at (<a href="http://www.allseenalliance.org">http://www.allseenalliance.org</a>).</p>
<p>The types of applications that will use the AllJoyn framework are limited 
only by the imagination of developers. Extending social networking is one 
example. A user could define a profile with likes and interests. 
Upon entering a location, the AllJoyn-enabled handset would immediately 
discover other nearby peers with similar interests, create a communication 
network between the peer devices, allow them to communicate, and exchange information.</p>
<p>The majority of handsets today have Wi-Fi integrated, so if two 
users walk into a home or office that has a Wi-Fi hotspot, their 
devices can connect to the underlying access point and transparently 
take advantage of the additional network capacity. Additionally, 
their devices can locate other devices in the proximity (defined 
by the Wi-Fi coverage footprint), can discover additional services 
on the other devices, and use those services, if desired. Further, 
it is possible to leverage a mixed topology connection such that a 
device taking advantage of the AllJoyn Thin LIbrary can be designated 
to use Bluetooth as a transport. As such, once connected to a device 
that runs the AllJoyn framework, the device can interact with the 
applications on the Wi-Fi devices.</p>
<p>Enabling real-time multi-player gaming is another example of how the 
AllJoyn framework might be used. For example, a multi-user game 
can be accomplished using different device classes such as laptops, 
tablets, and handsets; and different underlying network technologies 
such as Wi-Fi. The details of the infrastructure management are all 
handled by the AllJoyn framework, allowing the game author to focus 
on the design and implementation of the game, rather than dealing 
with the complexities of the peer-to-peer networking.</p>
<p>As the AllJoyn ecosystem expands, one can imagine any number of 
applications. For example:</p>
<ul><li>Create a playlist consisting of music, and stream the songs 
to an AllJoyn-enabled car stereo system, or store them on a 
home stereo (subject to digital rights management)</li>
<li>Sync recent photos or other media to an AllJoyn-enabled 
digital picture frame or television upon returning home from 
an event or trip</li>
<li>Control home appliances such as televisions, DVRs, or game consoles</li>
<li>Interact and share content with laptops and desktop 
computers in the area</li>
<li>Engage in project collaboration between colleagues and students 
in enterprise and educational settings</li>
<li>Provide proximity-based services like distributing coupons or vcards</li>
</ul><h2 id="benefits-of-the-alljoyn-framework">Benefits of the AllJoyn Framework</h2>
<p>As mentioned, the AllJoyn framework is a platform-neutral system 
that is designed to simplify proximity networking across heterogeneous 
distributed mobile systems.</p>
<p>Heterogeneous in this case means not only different devices, but 
different kinds of devices (e.g., PCs, handsets, tablets, consumer 
electronics devices) running on different operating  systems, 
using different communication technologies.</p>
<h3 id="open-source">Open source</h3>
<p>The AllJoyn framework is being developed as an open source project. 
This means that all of the AllJoyn codebase is available for 
inspection, and developers are encouraged to contribute 
additions and enhancements. If the AllJoyn framework is 
missing a feature, you can contribute. If you run into a snag 
using the AllJoyn framework, or have a technical question, 
other participants in the open source community are ready 
and willing to provide help and guidance. The AllJoyn codebase 
is available at (<a href="http://www.allseenalliance.org">http://www.allseenalliance.org</a>).</p>
<h3 id="operating-system-independence">Operating system independence</h3>
<p>The AllJoyn framework provides an abstraction layer allowing 
AllJoyn framework code and its applications to run on multiple 
OS platforms. As of this writing, the AllJoyn framework supports 
most standard Linux distributions including Ubuntu, and runs on 
Android 2.3 (Gingerbread) and later smartphones and tablets. The 
AllJoyn framework code also runs and is tested and validated on 
commonly available versions of the Microsoft Windows operating 
system including Windows XP, Windows 7, Windows RT, and Windows 8. 
Additionally, the AllJoyn framework code runs on Apple operating 
systems iOS and OS X, on embedded operating systems such as OpenWRT, 
and works with the Unity game development ecosystem.</p>
<h3 id="language-independence">Language independence</h3>
<p>Currently, developers may create applications using C++,Java, C#, 
JavaScript, and Objective-C.</p>
<h3 id="physical-network-and-protocol-independence">Physical network and protocol independence</h3>
<p>There are many technologies available to networked devices. 
The AllJoyn framework provides an abstraction layer that 
defines clean interfaces to the underlying network stacks 
and makes it relatively easy for a competent software engineer 
to add new networking implementations.</p>
<p>For example, as of this writing, the Wi-Fi Alliance has recently 
released a specification for Wi-Fi Direct, which will allow 
for point-to-point Wi-Fi connectivity. A networking module for 
Wi-Fi Direct is actively being developed that will transparently 
add Wi-Fi Direct and its pre-association discovery mechanisms 
to the available networking options for AllJoyn developers.</p>
<h3 id="dynamic-configuration">Dynamic configuration</h3>
<p>Often, as a mobile device makes its way through the various 
locations it encounters during its lifetime, associations with 
networks may come and go. This means that IP (Internet Protocol) 
addresses may change, network interfaces may become unusable, 
and services may be transitory.</p>
<p>The AllJoyn framework notices when old services are lost and 
new services appear, and forms new associations when required. 
The AllJoyn framework is primed and ready as an application 
layer for Wi-Fi Hotspot 2.0 - a technology that aims to bring 
the roaming transparency of cell phones and cell towers to Wi-Fi hotspots.</p>
<h3 id="service-advertisement-and-discovery">Service advertisement and discovery</h3>
<p>Whenever devices need to communicate, there must be some form 
of service advertisement and discovery. In the old days of 
static networks, human administrators made explicit arrangements 
to enable devices to communicate. More recently, the concepts of 
zero configuration networks have been popularized, especially 
with Apple Bonjour, and Microsoft Universal Plug and Play. 
We also see existing technology-specific discovery mechanisms 
available such the Bluetooth Service Discovery Protocol and 
emerging mechanisms such as the Wi-Fi Direct P2P Discovery 
specification. The AllJoyn framework provides a service 
advertisement and discovery abstraction that simplifies the 
process of locating and consuming services.</p>
<h3 id="security">Security</h3>
<p>The natural model for security in distributed applications is 
application-to-application. Unfortunately, in many cases, the 
network security model does not match this natural arrangement. 
For example, the Bluetooth protocol requires pairing between 
devices. Using this approach, once devices are paired, all 
applications on both devices are authorized. This may not be 
desirable when considering something more capable than a Bluetooth 
headset. For example, if two laptops are connected over Bluetooth, 
a much finer granularity is necessary. The AllJoyn framework is 
designed to provide extensive support for complex security models 
such as this, with an emphasis on application-to-application communication.</p>
<h3 id="object-model-and-remote-method-invocation">Object model and remote method invocation</h3>
<p>The AllJoyn framework utilizes an easy-to-understand object model 
and Remote Method Invocation (RMI) mechanism. The AllJoyn model 
re-implements the wire protocol set forth by the D-Bus specification 
and extends the D-Bus wire protocol to support distributed devices.</p>
<h3 id="software-componentry">Software componentry</h3>
<p>Along with a standard object model and wire protocol comes the 
ability to standardize various interfaces into components. 
In much the same way that a Java Interface declaration provides 
a specification to interact with a local instantiation of an 
implementation, the AllJoyn object model provides a language-independent 
specification to interact with a remote implementation.</p>
<p>Using a specification, many interface implementations can 
be considered, thereby enabling standard definitions for 
application communication. This is the enabling technology 
for software componentry. Software components are at the 
heart of many modern systems, and are especially visible 
in systems such as Android, which defines four primary 
component types as the only way to participate in the Android 
Application Framework; or in Microsoft systems which use 
descendants of the Component Object Model (COM) system.</p>
<p>We expect that a rich "sea" of interface definitions will 
emerge in order to enable the scenarios described in <a href="#overview">Overview</a>. 
The AllJoyn project expects to work with users to define and 
publish standard interfaces and support the sharing of implementations.</p>
<h2 id="conceptual-overview">Conceptual Overview</h2>
<p>The AllJoyn framework contains a number of abstractions 
used to help understand and relate the various pieces. 
There is only a small number of key abstractions that one 
must know in order to understand AllJoyn-based systems.</p>
<p>This section provides a high-level view of the AllJoyn framework 
to provide a foundation for follow-on documents such as the 
detailed API documentation.</p>
<h3 id="remote-method-invocation">Remote Method Invocation</h3>
<p>Distributed systems are groups of autonomous computers 
communicating over some form of network in order to achieve 
a common goal. Consider the ability of a program running in 
one address space on one machine to call a procedure located 
in another address space on a physically separate machine as 
if it were local. This is usually accomplished through 
Remote Procedure Call (RPC) or, if object-oriented concepts 
are in play, RMI or Remote Invocation (RI).</p>
<p>The basic model in an RPC exchange involves a <em>client</em>, which 
is the caller of the RPC, and a server (called a service in 
the AllJoyn model), which actually executes the desired remote 
procedure. The caller executes a client stub that looks just 
like a local procedure on the local system. The client stub 
packages up the parameters of its procedure (called marshaling 
or serializing the parameters) into some form of message and 
then calls in to the RPC system to arrange delivery of the 
message over some standard transport mechanism such as the 
Transmission Control Protocol (TCP). At the remote machine, 
there is a corresponding RPC system running, which unmarshals 
(deserializes) the parameters and delivers the message to a 
server stub that arranges to execute the desired procedure. 
If the called procedure needs to return any information, a 
similar process is used to convey the return values back to 
the client stub, which in turn returns them to the original caller.</p>
<p>Note that it is not required that a given process only implement 
a client personality or a service personality. If two or more 
processes implement the same client and service aspects,<br />they are considered peers. In many cases, AllJoyn applications 
will implement similar functionality and be considered peers. 
The AllJoyn framework supports both classic client and service 
functions and also peer-to-peer networking.</p>
<h3 id="alljoyn-bus">AllJoyn bus</h3>
<p>The most basic abstraction of the AllJoyn system is the 
AllJoyn bus. It provides a fast, lightweight way to move marshaled 
messages around the distributed system. One can view the AllJoyn bus 
as a kind of "freeway" over which those messages flow. 
The following figure shows what an instance of an AllJoyn bus 
on a single device might look like, conceptually. </p>
<p><img src="/sites/default/files/developers/learn/standard-core/prototypical-alljoyn-bus.png" alt="prototypical-alljoyn-bus" /></p>
<p><strong>Figure:</strong> Prototypical AllJoyn bus</p>
<p>Points about the prototypical AllJoyn bus are detailed below.</p>
<ul><li>The bus itself is shown as the thick horizontal dark line. 
The vertical lines can be thought of as "exits" and are the 
sources and/or destinations of messages that are flowing over the bus.</li>
<li>The connections to the bus are depicted as hexagons. Just as 
the exits on a freeway are typically assigned numbers, each 
connection is assigned a unique connection name. A simplified 
form of the connection name is used here for clarity.</li>
<li>In many cases, the connections to the bus can be thought of 
as co-resident with processes. Therefore, the unique connection name 
<code>:1.1</code> may be assigned to a connection in a process running some 
instance of an application, and the unique connection name 
<code>:1.4</code> may be assigned to a connection in a process running an 
instance of some other application. The goal of the AllJoyn 
bus is to allow the two applications to communicate without 
having to deal with the details of the underlying mechanisms. 
One of the connections can be thought of as the client stub, 
and the other side can fulfill the duties of the service stub.</li>
</ul><p>The prototypical AllJoyn bus figure shows an instance of an AllJoyn bus and 
illustrates how a software bus can provide interprocess communication 
between components attached to the bus. The AllJoyn bus is 
typically extended across devices as shown in the following figure. 
A communication link between the segment of the logical bus 
residing on the Smartphone and the components residing on the 
Linux host is formed when required by the components.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/device-device-comm.png" alt="device-device-comm" /></p>
<p><strong>Figure:</strong> Device-to-device communication handled by the AllJoyn framework</p>
<p>The management of this communication link is handled by the 
AllJoyn system and may be formed using a number of underlying 
technologies such as Wi-Fi or Wi-Fi Direct. There may be multiple 
devices involved in hosting the AllJoyn bus, but this is 
transparent to the users of the distributed bus. To a component 
on the bus, a distributed AllJoyn system looks like a bus 
that is local to the device.</p>
<p>The following figure shows how the distributed bus may appear 
to a user of the bus. A component (for example, the Smartphone 
connection labeled <code>:1.1</code>) can make a procedure call to the 
component labeled <code>:1.7</code> on the Linux host without having to 
worry about the location of that component.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/dist-bus-local-bus.png" alt="dist-bus-local-bus" /></p>
<p><strong>Figure:</strong> A distributed AllJoyn bus appears as a local bus</p>
<h3 id="bus-router">Bus router</h3>
<p>The device-to-device communication figure illustrates that 
the logical distributed bus is actually split up into a number 
of segments, each running on a different device. The AllJoyn 
functionality that implements these logical bus segments is 
called an AllJoyn router.</p>
<p>The term daemon is commonly used in Unix-derived systems to 
describe programs that run to provide some needed functionality 
to the computer system. On a Linux system instead of saying daemon 
we call it the standalone router. In Windows systems, the term 
service is more typically used, however we refer to it as the AllJoyn router.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/bubble-diagram-bus.png" alt="bubble-diagram-bus" /></p>
<p><strong>Figure:</strong> Relating bubble diagrams to the bus</p>
<p>In order to visualize the AllJoyn router, it is useful to create 
a bubble diagram. Consider two AllJoyn bus segments, one residing 
on a Smartphone and one on a Linux Host, as shown in previous figure. 
The connections to the bus are labeled as clients (C) and 
services (S) using the sense of clients and services in the RMI model. 
The AllJoyn router that implements the core of the distributed 
bus is labeled (D). The components of the previous figure are typically 
translated into the illustration shown in the folliwing figure.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/alljoyn-bubble-diagram.png" alt="alljoyn-bubble-diagram" /></p>
<p><strong>Figure:</strong> AllJoyn bubble diagrams</p>
<p>The bubbles can be viewed as computer processes running on a 
distributed system. The two client (C) and the service (S) 
processes on the left are running on the Smartphone. These three 
processes communicate with an AllJoyn router running on the Smartphone 
which implements the local segment of the distributed AllJoyn bus. 
On the right side, there is a router which implements the local 
segment of the AllJoyn bus on the Linux Host.</p>
<p>These two routing nodes coordinate the message flow across the 
logical bus, which appears as a single entity to the connections, 
as shown in the distributed AllJoyn bus figure. Similar to the configuration on the Smartphone, 
there are two service components and a client component on the Linux host.</p>
<p>In this configuration, client component C1 can make remote method 
calls to service component S1 as if it were a local object. 
Parameters are marshaled at the source and routed off of the 
local bus segment by the router residing on the Smartphone. 
The marshaled parameters are sent over the network link 
(transparently from the perspective of the client) to the 
routing node on the Linux host. The AllJoyn router running on 
the Linux host determines that the destination is S1 and arranges 
to have the parameters unmarshaled and the remote method invoked 
on the service. If return values are expected, the process is 
reversed to communicate the return values back to the client.</p>
<p>Since the standalone routers are running in a background process 
and the clients and services are running in separate processes, 
there must be a "representative" of the routers in each of those 
separate processes. The AllJoyn framework calls these 
representatives bus attachments.</p>
<h3 id="bus-attachments">Bus attachments</h3>
<p>Every connection to the AllJoyn bus is mediated by a specific 
AllJoyn component called a bus attachment. A bus attachment lives 
in each process that has a need to connect to the AllJoyn software bus.</p>
<p>An analogy is often drawn between hardware and software when 
discussing software components. One can think of a local segment 
of a distributed AllJoyn bus in much the same way as one thinks of 
the hardware backplane bus in a desktop computer. The hardware bus 
itself moves electronic messages and has attachment points called 
connectors into which one plugs cards. The analogous function of 
the connector in the AllJoyn framework is the bus attachment.</p>
<p>An AllJoyn bus attachment is a local language-specific object that 
represents the distributed AllJoyn bus to a client, service, or peer. 
For example, there is an implementation of the bus attachment 
functionality provided for users of the C++ language, and there 
is an implementation of the same bus attachment functionality 
provided for users of the Java language. As the AllJoyn framework 
adds language bindings, more of these language-specific implementations 
will become available.</p>
<h3 id="bus-methods-bus-properties-and-bus-signals">Bus methods bus properties and bus signals</h3>
<p>The AllJoyn framework is fundamentally an object-oriented system. 
In object-oriented systems, one speaks of invoking methods on objects 
(thus the term Remote Method Invocation when speaking of distributed 
systems). Objects in the object-oriented programming sense have members. 
Classically, these are object methods or properties, which are known 
as BusMethods and BusProperties in the AllJoyn framework. The AllJoyn 
framework also has the concept of a BusSignal, which is an asynchronous 
notification of some event or state change in an object.</p>
<p>In order to transparently arrange for communication between clients, 
services, and peers, there must be some specification of the parameter 
ordering for bus methods and bus signals, and some form of type information 
for bus properties. In computer science, the description or definition of 
the types of the inputs and outputs of a method or signal is called the 
type signature.</p>
<p>Type signatures are defined by character strings. Type signatures can 
describe character strings, all of the basic number types available 
in most programming languages, and composite types such as arrays and 
structures built up from these basic types. The specific assignment 
and use of type signatures is beyond the scope of this introduction, 
but the type signature of a bus method, signal, or property conveys 
to the underlying AllJoyn system how to convert the passed parameters 
and return values to and from the marshaled representation over the bus.</p>
<h3 id="bus-interfaces">Bus interfaces</h3>
<p>In most object-oriented programming systems, collections of methods 
or properties are composed into groups that have some inherent 
common relationship. A unified declaration of this collection 
of functions is called an interface. The interface serves as a 
contract between an entity implementing the interface specification 
and the outside world. As such, interfaces are candidates for 
standardization by appropriate standards bodies. Specifications 
for numerous interfaces for services ranging from telephony to 
media player control can be found on various web sites. Interfaces 
specified this way are described in XML as per the D-Bus specification.</p>
<p>An interface definition collects a group of bus methods, bus signals, 
and bus properties along with their associated type signatures into 
a named group. In practice, interfaces are implemented by client, 
service, or peer processes. If a given named interface is 
implemented, there is an implicit contract between the implementation 
and the outside world that the interface supports all of the 
bus methods, bus signals, and bus properties of the interface.</p>
<p>Interface names typically take the form of a reversed domain name. 
For example, there are a number of standard interfaces that 
the AllJoyn framework implements. One of the AllJoyn standard 
interfaces is the <code>org.alljoyn.Bus</code> interface which routers 
implement and which provides some of the basic functionality 
for bus attachments.</p>
<p>It is worth noting that the interface name is simply a string 
in a relatively free-form namespace and that other namespaces 
may have a similar look. The interface name string serves a 
specific function that should not be confused with other similar 
strings, in particular bus names. For example, <code>org.alljoyn.sample.chat</code> 
may be a bus name which is the constant, unchanging name that 
a client will search for. It may also be the case that 
<code>org.alljoyn.sample.chat</code> is the interface name that defines 
the methods, signals and properties available in a bus object 
associated with a bus attachment of the specified bus name. 
The existence of an interface with the given interface name 
is implied by the existence  of the bus name; however, they 
are two completely different things that can sometimes look 
exactly the same.</p>
<h3 id="bus-objects-and-object-paths">Bus objects and object paths</h3>
<p>The bus interface provides a standard way to declare an 
interface that works across the distributed system. The bus 
object provides the scaffolding into which an implementation 
of a given interface specification may be placed. Bus objects 
live in bus attachments and serve as endpoints of communication.</p>
<p>Since there may be multiple implementations of a specific 
interface in any particular bus attachment, there must be 
additional structure to differentiate these interface implementations. 
This is provided by an object path.</p>
<p>Just as an interface name is a string that lives in an interface 
namespace, the object path lives in a namespace. The namespace 
is structured as a tree, and the model for thinking about 
paths is a directory tree in a filesystem. In fact, the path 
separator in an object path is the slash character (/), just 
as in a Unix filesystem. Since bus objects are implementations 
of bus interfaces, object paths might follow the naming 
convention of the corresponding interface. In the case of an 
interface defining a disk controller interface (for example, 
<code>org.freedesktop.DeviceKit.Disks</code>), one could imagine a case 
where multiple implementations of this interface were described 
by the following object paths corresponding to an implementation 
of the interface for two separate physical disks in a system:</p>
<pre><code class="lang-sh"><code class="sh">/org/freedesktop/DeviceKit/Disks/sda1

/org/freedesktop/DeviceKit/Disks/sda2</code>
</code></pre>
<h3 id="proxy-bus-object">Proxy bus object</h3>
<p>Bus objects on an AllJoyn bus are accessed through proxies. 
A proxy is a local representation of a remote object that is 
accessed through the bus. Proxy is a common term that is not 
specific to the AllJoyn system, however you will often encounter 
the term ProxyBusObject in the context of the AllJoyn framework 
to indicate the specific nature of the proxy - that it is a 
local proxy for a remotely located bus object.</p>
<p>The ProxyBusObject is the portion of the low-level AllJoyn code 
that enables the basic functionality of an object proxy.</p>
<p>Typically, the goal of an RMI system is to provide a proxy that 
implements an interface which looks just like that of the remote 
object that will be called. The proxy object implements the 
same interface as the remote object, but drives the process 
of marshaling the parameters and sending the data to the service.</p>
<p>In the AllJoyn framework, the client and service software, 
often through specific programming language bindings, provides 
the actual user-level proxy object. This user-level proxy object 
uses the capabilities of the AllJoyn proxy bus object to 
accomplish its goal of local/remote transparency.</p>
<h3 id="bus-names">Bus names</h3>
<p>A connection on the AllJoyn bus acting as a service provides 
implementations of interfaces described by interface names. 
The interface implementations are organized into a tree of 
bus objects in the service. Clients wishing to consume the 
services do so via proxy objects, which use lower-level 
AllJoyn proxy bus objects to arrange for delivery of bus method-, 
bus signal- and bus property-related information across the 
logical AllJoyn bus.</p>
<p>In order to complete the addressing picture of the bus, 
connections to the bus must have unique names. The AllJoyn 
system assigns a unique temporary bus name to each bus attachment. 
However, this unique name is autogenerated each time the service 
connects to the bus and is therefore unsuitable for use as 
a persistent service identifier. There must be a consistent 
and persistent way to refer to services attached to the bus. 
These persistent names are referred to as <em>well-known names</em>.</p>
<p>Just as one might refer to a host system on the Internet by 
a domain name that does not change over time (e.g., quicinc.com), 
one refers to a functional unit on the AllJoyn bus by its well-known 
bus name. Just as interface names appear to be reversed domain names, 
bus names have the same appearance. Note that this is the source of 
some confusion, since interface names and well-known bus names 
are often chosen for convenience to be the same string. 
Remember that they serve distinct purposes: the interface name 
identifies a contract between the client and the service that 
is implemented by a bus object living in a bus attachment; 
and the well-known name identifies the service in a consistent 
way to clients wishing to connect to that attachment.</p>
<p>To use a well-known name, an application (by way of a bus 
attachment) must make a request to the bus router to use that 
name. If the well-known name is not already in use by another 
application, exclusive use of the well-known name is granted. 
This is how, at any time, well-known names are guaranteed to 
represent unique addresses on the bus.</p>
<p>Typically, a well-known name implies a contract that the associated 
bus attachment implements a collection of bus objects and therefore 
some concept of a usable service. Since bus names provide a unique 
address on the distributed bus, they must be unique across the bus. 
For example, one could use the bus name, <code>org.alljoyn.sample.chat</code>, 
which would indicate that a bus attachment of the same name would 
be implementing a chat service. By virtue of the fact that it 
has taken that name, one could infer that it implements a 
corresponding <code>org.alljoyn.sample.chat</code> interface in a bus 
object located at object path <code>/org/alljoyn/sample/chat</code>.</p>
<p>The problem with this is that in order to "chat", one would 
expect to see another similar component on the AllJoyn bus 
indicating that it also supports the chat service. Since bus 
names must uniquely identify a bus attachment, there is a 
requirement to append some form of suffix to ensure uniqueness. 
This could take the form of a user name, or a unique number. 
In the chat example, one could then imagine multiple bus attachments:</p>
<pre><code class="lang-sh"><code class="sh">org.alljoyn.sample.chat.bob 

org.alljoyn.sample.chat.carol</code>
</code></pre>
<p>In this case, the well-known name prefix <code>org.alljoyn.sample.chat.</code> 
acts as the service name, from which one can infer the existence 
of the chat interface and object implementations. The suffixes, 
<code>bob</code> and <code>carol</code>, serve to make the instance of the well-known name unique.</p>
<p>This leads to the question of how services are located in the 
distributed system. The answer is via service advertisement and discovery by clients.</p>
<h3 id="advertisements-and-discovery">Advertisements and discovery</h3>
<p>There are two facets to the problem of service advertisement 
and discovery. As described above, even if the service resides 
on the local segment of the AllJoyn bus, one needs to be able 
to see and examine the well-known names of all of the bus attachments 
on the bus in order to determine that one of them has a specific 
service of interest. A more interesting problem occurs when 
one considers how to discover services that are not part of 
an existing bus segment.</p>
<p>Consider what might happen when one brings a device running 
the AllJoyn framework into the proximity of another. Since the 
two devices have been physically separated, there is no way for 
the two involved bus routers to have any knowledge of the other. 
How do the routing nodes determine that the other exists, and 
how do they determine that there is any need to connect to 
each other and form a logical distributed AllJoyn bus?</p>
<p>The answer is through the AllJoyn service advertisement and 
discovery facility. When a service is started on a local device, 
it reserves a given well-known name and then advertises its 
existence to other devices in its proximity. The AllJoyn framework 
provides an abstraction layer that makes it possible for a 
service to do an advertise operation that may be communicated 
transparently via underlying technologies, such as Wi-Fi, Wi-Fi 
Direct, or other/future wireless transports. Neither the client 
nor the service require any knowledge of how these advertisements 
are managed by the underlying technology.</p>
<p>For example, in a contacts-exchanging application, one instance 
of the application may reserve the well-known name 
<code>org.alljoyn.sample.contacts.bob</code> and advertise the name. 
This might result in one or more of the following: a UDP 
multicast over a connected Wi-Fi access point, a pre-association 
service advertisement in Wi-Fi Direct, or a Bluetooth Service 
Discovery Protocol message. The mechanics of how the advertisement 
is communicated do not necessarily concern the advertiser. 
Since a contacts-exchange application is conceptually a 
peer-to-peer application, one would expect the second phone to 
also advertise a similar service, for example, <code>org.alljoyn.sample.contacts.carol</code>.</p>
<p>Client applications may declare their interest in receiving 
advertisements by initiating a discovery operation. For example, 
it may ask to discover instances of the contacts service as 
specified by the prefix <code>org.alljoyn.sample.contacts</code>. In this case, 
both devices would make that request.</p>
<p>As soon as the phones enter the proximity of the other, the 
underlying AllJoyn systems transmit and receive the advertisements 
over the available transports. Each will automatically receive 
an indication that the corresponding service is available.</p>
<p>Since a service advertisement can receive over multiple 
transports, and in some cases it requires additional low-level work 
to bring up an underlying communication mechanism, there is another 
conceptual part to the use of discovered services. This is the communication session.</p>
<h3 id="sessions">Sessions</h3>
<p>The concepts of bus names, object paths, and interface names have 
been previously discussed. Recall that when an entity connects to 
an AllJoyn bus, it is assigned a unique name. Connections 
(bus attachments) may request that they be granted a well-known name. 
The well-known name is used by clients to locate or discover 
services on the bus. For example, a service may connect to an 
AllJoyn bus and be assigned the unique name <code>:1.1</code> by the bus. 
If a service wants other entities on the bus to be able to find it, 
the service must request a well-known name from the bus, 
for example, <code>com.companyA.ProductA</code> (remember that a unique 
instance qualifier is usually appended).</p>
<p>This name implies at least one bus object that implements some 
well-known interface for it to be meaningful. Usually, the 
bus object is identified within the connection instance by a 
path with the same components as the well-known name (this is 
not a requirement, it is only a convention). In the example, 
the path to the bus object corresponding to the bus name 
<code>com.companyA.ProductA</code> might be <code>/com/companyA/ProductA</code>.</p>
<p>In order to understand how a communication session from a client 
bus attachment to a similar service attachment is formed and to 
provide an end-to-end example, it is useful to compare and contrast 
the AllJoyn mechanism to a more familiar mechanism.</p>
<h4 id="postal-address-analogy">Postal address analogy</h4>
<p>In the AllJoyn framework, a service requests a human-readable name 
so it can advertise itself with a well-known and well-understood label. 
Well-known names must be translated into unique names for the 
underlying network to properly route information, for example:</p>
<pre><code><code>Well-known-name:org.alljoyn.sample.chat 

Unique name::1.1</code>
</code></pre><p>This tells us that the well-known name advertised as 
<code>org.alljoyn.sample.chat</code> corresponds to a bus attachment that 
has been assigned the unique name <code>:1.1</code>. One can think of this 
in the same way as a business has a name and a postal address.
To continue the analogy, a common situation arises when a 
business is located in a building along with other businesses. 
In such a situation, one might find a business address further 
qualified by a suite number. Since AllJoyn bus attachments are 
capable of providing more than one service, there must also be 
a way to identify more than one destination on a particular attachment. 
A "contact port number" corresponds to the suite number destination 
in the postal address analogy.</p>
<p>Just as one may send a letter by the national mail system 
(U.S. Post Office, La Poste Suisse) or a private company 
(Federal Express, United Parcel Service) and by different 
urgencies (overnight, two-day, overland delivery), when contacting 
a service using the AllJoyn framework, one must specify 
certain desired characteristics of the network connection to 
provide a complete delivery specification (e.g., reliably 
delivered messages, reliably delivered unstructured data, 
or unreliably delivered unstructured data).</p>
<p>Notice the separation of the address information and the 
delivery information in the example  above. Just as one can 
contemplate choosing several ways to get a letter from one place 
to another, it will become evident that one can choose from several 
ways to get data delivered using the AllJoyn system.</p>
<h4 id="the-alljoyn-session">The AllJoyn session</h4>
<p>Just as a properly labeled postal letter has "from" and "to" 
addresses, an AllJoyn session requires equivalent "from" and "to" 
information. In the case of an AllJoyn system, the from address 
would correspond to the location of the client component and 
the to address would relate to the service.</p>
<p>Technically, these from or to addresses, in the context of 
computer networking, are called half-associations. 
In the AllJoyn framework, this to (service) address has the following form:</p>
<pre><code class="lang-c"><code class="c">{session options, bus name, session port}</code>
</code></pre>
<p>The first field, session options, relates to how the data is 
moved from one side of the connection to the other. In an 
IP network, choices might be TCP or UDP. In the AllJoyn framework, 
these details are abstracted and so choices might be, 
"message-based", "unstructured data", or "unreliable unstructured data". 
A service destination is specified by the well-known name the 
corresponding bus attachment has requested.</p>
<p>Similar to the suite number in the postal example, the AllJoyn 
model has the concept of a point of delivery "inside" the 
bus attachment. In the AllJoyn framework, this is called a 
session port. Just as a suite number has meaning only within 
a given building, the session port has meaning only within 
the scope of a given bus attachment. The existence and values 
of contact ports are inferred from the bus name in the same 
way that underlying collections of objects and interfaces are inferred.</p>
<p>The from address, corresponding to the client information, is 
similarly formed. A client must have its own half-association 
in order to communicate with the service.</p>
<pre><code class="lang-c"><code class="c">{session options, unique name, session ID}</code>
</code></pre>
<p>It is not required for clients to request a well-known bus name, 
so they provide their unique name (such as <code>:1.1</code>). Since clients 
do not act as the destination of a session, they do not provide 
a session port, but are assigned a session ID when the connection 
is established. Also during the session establishment procedure, 
a session ID is returned to the service. For those familiar with 
TCP networking, this is equivalent to the connection establishment 
procedure used in TCP, where the service is contacted over a 
well-known port. When the connection is established, the client 
uses an ephemeral port to describe a similar half-association.</p>
<p>During the session establishment procedure, the two half-associations 
are effectively joined:</p>
<pre><code class="lang-c"><code class="c">{session options, bus name, session port}    Service

{session options, unique name, session ID}    Client</code>
</code></pre>
<p>Notice that there are two instances of the session options. 
When communication establishment begins, these may be viewed 
as supported session options provided by the service and 
requested session options provided by the client. Part of 
the session establishment procedure consists of negotiating 
an actual final set of options to be used in the session. 
Once a session has been formed, the half-associations of 
the client and service side describe a unique AllJoyn 
communication path:</p>
<pre><code class="lang-c"><code class="c">{session options, bus name, unique name, session ID}</code>
</code></pre>
<p>During the session establishment procedure, a logical networking 
connection is formed between the communicating routing nodes. 
This may result in the creation of a wireless radio topology 
management operation. If such a connection already exists, 
it is re-used. A newly created underlying router-to-router 
connection is used to perform initial security checks, and once 
this is complete, the two routers have effectively joined the 
two separate AllJoyn software bus segments into the larger virtual bus.</p>
<p>Because issues regarding end-to-end flow control of the underlying 
connection must be balanced with topological concerns in some 
technologies, the actual connection between the two communicating 
endpoints (the "from" client and the "to" service) may or may 
not result in a separate communication channel being formed. 
In some cases it is better to flow messages over an ad hoc 
topology and in some cases it may be better to flow messages 
directly over a new connection (TCP/IP). This is another of the 
situations that may require deep understanding of the underlying 
technology to resolve, and which the AllJoyn framework happily 
accomplishes for you. A user need only be aware that messages 
are routed correctly over a transport mechanism that meets 
the abstract needs of the application.</p>
<h4 id="self-join-feature">Self-join feature</h4>
<p>In AllJoyn releases up to R14.06, it was impossible for applications
to join a session they themselves hosted. For applications that consume 
information or services they themselves also provide, this created an 
asymmetry: they had to treat the bus objects they hosted themselves 
differently from those hosted by other peers. The self-join feature 
removes this asymmetry by allowing applications to join the sessions 
they themselves host. Consequently, a locally hosted bus object can be 
treated in exactly the same way as a remotely hosted bus object.</p>
<h4 id="determining-the-presence-of-a-peer-pinging-and-auto-pinging">Determining the presence of a peer - pinging and auto-pinging</h4>
<p>Sometimes, a application needs to know which peers are present on the communication 
channel ("the wire") and which aren't.  For this reason, a PING API was introduced in 
version 14.06. This PING API allows to determine whether a peer is up or not. 
However, for this API, the responsibility for using the PING API was with the 
Application, which periodically needed to ping the peers. From Release 14.12 onwards, 
an automatic PING or Auto-Pinger is introduced. This Auto-Pinger performs the
periodic peer detection, relieving  the application of having to do it.</p>
<h3 id="bringing-it-all-together">Bringing it all together</h3>
<p>The AllJoyn framework aims to provide a software bus that 
manages the implementation of advertising and discovering services, 
providing a secure environment, and enabling location-transparent 
remote method invocation. A traditional client/service arrangement 
is enabled, and peer-to-peer communications follow by combining 
the aspects of client and services.</p>
<p>The most basic abstraction in the AllJoyn framework is the 
software bus that ties everything together. The virtual distributed 
bus is implemented by AllJoyn routing nodes which are background 
programs running on each device. Clients and services (and peers) 
connect to the bus via bus attachments. The bus attachments 
live in the local processes of the clients and services and 
provide the interprocess communication that is required to 
talk to the local AllJoyn router.</p>
<p>Each bus attachment is assigned a unique name by the system 
when it connects. A bus attachment can request to be granted 
a unique human-readable bus name that it can use to advertise 
itself to the rest of the AllJoyn world. This well-known bus 
name lives in a namespace that looks like a reversed domain 
name and encourages self-management of the namespace. 
The existence of a bus attachment of a specific name implies 
the further existence of at least one bus object that implements 
at least one interface specified by a name. Interface names are 
assigned out of a namespace that is similar, but has a different 
meaning than bus names. Each bus object lives in a tree structure 
rooted at the bus attachment and described by an object path 
that looks like a Unix filesystem path.</p>
<p>The following figure shows a hypothetical arrangement of how 
all of these pieces are related. </p>
<p><img src="/sites/default/files/developers/learn/standard-core/hypothetical-alljoyn-bus-instance.png" alt="hypothetical-alljoyn-bus-instance" /></p>
<p><strong>Figure:</strong> Overview of a hypothetical AllJoyn bus instance</p>
<p>At the center is the dark line representing the AllJoyn bus. 
The bus has "exits" which are the BusAttachments assigned 
the unique names <code>:1.1</code> and <code>:1.4</code>. In the figure, the BusAttachment 
with the unique name of <code>:1.1</code> has requested to be known as 
<code>org.alljoyn.samples.chat.a</code> and has been assigned the corresponding 
well-known bus name. The "a" has been added to ensure that 
the bus name is unique.</p>
<p>There are a number of things implied by taking on that bus name. 
First, there is a tree structure of bus objects that resides 
at different paths. In this hypothetical example, there are 
two bus objects. One is at the path <code>/org/alljoyn/samples/chat/chat</code> 
and which presumably implements an interface suitable for chatting. 
The other bus object lives at the path <code>/org/alljoyn/samples/chat/contacts</code>
and implements an interface named <code>org.alljoyn.samples.chat.contacts</code>. 
Since the given bus object implements the interface, it must 
provide implementations of the corresponding bus methods, 
bus signals, and bus properties.</p>
<p>The number 42 represents a contact session port that clients 
must use to initiate a communication session with the service. 
Note that the session port is unique only within the context of 
a particular bus attachment, so the other bus attachment in the 
figure may also use 42 as its contact port as shown.</p>
<p>After requesting and being granted the well-known bus name, 
a service will typically advertise the name to allow clients 
to discover its service. The following figure shows a service making an 
advertise request to its local router. The router, based on 
input from the service, decides what network medium-specific 
mechanism it should use to advertise the service and begins doing so.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/service-performs-advertise.png" alt="service-performs-advertise" /></p>
<p><strong>Figure:</strong> Service performs an Advertise</p>
<p>When a prospective client wants to locate a service for consumption, 
it issues a find name request. Its local router device, again 
based on input from the client, determines the best way to 
look for advertisements and probes for advertisements.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/client-requests-find-name.png" alt="client-requests-find-name" /></p>
<p><strong>Figure:</strong> Client requests to Find Name</p>
<p>Once the devices move into proximity, they begin hearing 
each other's advertisements and discovery requests over whichever 
media are enabled. The following figure shows how the router hosting the 
service hears the discovery requests and responds.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/router-reports-found-name.png" alt="router-reports-found-name" /></p>
<p><strong>Figure:</strong> Router reports Found Name</p>
<p>Finally, the following figure shows the client receiving an indication 
that there is a new router in the area that is hosting the desired service.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/client-discovers-service.png" alt="client-discovers-service" /></p>
<p><strong>Figure:</strong> Client discovers service</p>
<p>The client and service sides of the developing scenario both 
use methods and callbacks on their bus attachment object to 
make the requests to orchestrate the advertisement and discovery 
process. The service side implements bus objects to provide 
its service, and the client will expect to use a proxy object 
to provide an easy-to-use interface for communicating with 
the service. This proxy object will use an AllJoyn ProxyBusObject 
to orchestrate communication with the service and provide 
for the marshaling and unmarshaling of method parameters 
and return values.</p>
<p>Before remote methods can be called, a communication session 
must be formed to effectively join the separate bus segments. 
Advertisement and discovery are different from session establishment. 
One can receive an advertisement and take no action. It is 
only when an advertisement is received, and a client decides 
to take action to join a communication session, that the 
buses are logically joined into one. To accomplish this, 
a service must create a communication session endpoint and 
advertise its existence; and a client must receive that 
advertisement and request to join the implied session.
The service must define a half-association before it advertises 
its service. Abstractly this will look something like the following:</p>
<pre><code class="lang-c"><code class="c">{reliable IP messages, org.alljoyn.samples.chat.a, 42}</code>
</code></pre>
<p>This indicates that it will talk to clients over a reliable 
message-based transport, has taken the well-known bus name 
indicated, and expects to be contacted at session port 42. 
This is the situation seen in the hypothetical bus instance figure.</p>
<p>Assume that there is a bus attachment with the unique 
name <code>:2.1</code> wanting to connect from a physically remote 
routing node. It will provide its half association to the 
system and a new session ID will be assigned and communicated 
to both sides of the conversation:</p>
<pre><code class="lang-c"><code class="c">{reliable IP messages, org.alljoyn.samples.chat.a, :2.1, 1025}</code>
</code></pre>
<p>The new communication session will use a reliable messaging 
protocol implemented using the IP protocol stack which will 
exist between the bus attachment named <code>org.alljoyn.samples.chat.a</code> 
(the service) and the bus attachment named :2.1 (the client). 
The session ID used to describe the session is assigned by 
the system and is 1025 in this case.</p>
<p>As a result of establishing the end-to-end communication 
session, the AllJoyn system takes whatever actions are 
appropriate to create the virtual software bus shown in 
the distributed bus figure. Note that this is a virtual picture, and what 
may have actually happened is that a Wi-Fi Direct peer-to-peer 
connection was formed to host a TCP connection, or a Wireless 
access point was used to host a UDP connection, depending 
on the provided session options. Neither the client nor 
the service is aware that this possibly very difficult 
job was completed for them.</p>
<p>At this point, authentication can be attempted if desired 
and then the client and service begin communicating using the RMI model.</p>
<p>Of course, the scenario is not limited to one client on one 
device and one service on another device. There may be any number 
of clients and any number of services (up to a limit of device or 
network capacity) combining to accomplish some form of 
cooperative work. Bus attachments may take on both client 
and service personalities and implement peer-to-peer services. 
AllJoyn routers take on the hard work of forming a manageable 
logical unit out of many disparate components and routing messages. 
Additionally, the nature of the interface description and 
language bindings allow interoperability between components 
written in different programming languages.</p>
<h2 id="high-level-system-architecture">High-Level System Architecture</h2>
<p>From the perspective of a user of the AllJoyn system, the most 
important piece of the architecture to understand is that of 
a client, service, or peer. From a system perspective, there 
is really no difference between the three basic use cases; 
there are simply different usage patterns of the same system-provided functionality.</p>
<h3 id="clients-services-and-peers">Clients, services, and peers</h3>
<p>The following figure shows the architecture of the system from a user 
(not AllJoyn router) perspective. </p>
<p><img src="/sites/default/files/developers/learn/standard-core/client-service-peer-arch.png" alt="client-service-peer-arch" /></p>
<p><strong>Figure:</strong> Basic client, service, or peer architecture</p>
<p>At the highest level are the language bindings. The AllJoyn system 
is written in C++, so for users of this language, no bindings 
are required. However, for users of other languages, such 
as Java or JavaScript, a relatively thin translation layer 
called a language binding is provided. In some cases, the binding 
may be extended to offer system-specific support. For example, 
a generic Java binding will allow the AllJoyn system to be 
used from a generic Java system that may be running under 
Windows or Linux; however, an Android system binding may 
also be provided which more closely integrates the AllJoyn system 
into Android-specific constructs such as a service component in 
the Android application framework.</p>
<p>The system and language bindings are built on a layer of helper 
objects which are designed to make common operations in the 
AllJoyn system easier. It is possible to use much of the AllJoyn 
system without using these helpers; however, their use is 
encouraged since it provides another level of abstract interface. 
The bus attachment, mentioned in the previous chapters, is a 
critical helper without which the system is unusable. In addition 
to the several critical functions provided, a bus attachment 
also provides convenience functions to make management of 
and interaction with the underlying software bus much easier.</p>
<p>Under the helper layer is the messaging and routing layer. 
This is the home of the functionality that marshals and 
unmarshals parameters and return values into messages that 
are sent across the bus. The routing layer arranges for the 
delivery of inbound messages to the appropriate bus objects 
and proxies, and arranges for messages destined for other 
bus attachments to be sent to an AllJoyn router for delivery.</p>
<p>The messaging and routing layer talks to an endpoint layer. 
In the lower levels of the AllJoyn system, data is moved 
from one endpoint to another. This is an abstract communication 
endpoint from the perspective of the networking code. 
Networking abstractions are fully complete at the top of the 
endpoint's layer, where there is essentially no difference 
between a connection over a non Wi-Fi radio (Bluetooth) and 
a connection over a wired Ethernet.</p>
<p>Endpoints are specializations of transport mechanism-specific 
entities called transports, which provide basic networking 
functionality. In the case of a client, service, or peer, 
the only network transport used is the local transport. 
This is a local interprocess communication link to the 
local AllJoyn bus router. In Linux-based systems, this is 
a Unix-domain socket connection, and in Windows-based systems 
this is a TCP connection to the local router.</p>
<p>The AllJoyn framework provides an OS abstraction layer to 
provide a platform on which the rest of the system is built, 
and at the lowest level is the native system.</p>
<h3 id="routers">Routers</h3>
<p>AllJoyn routers are the glue that holds the AllJoyn system together. 
As previously discussed, routers are programs that run in 
the background, waiting for interesting events to happen and 
responding to them. Because these events are usually external, 
it is better to approach the router architecture from a bottom-up 
perspective.</p>
<p>At the lowest level of the router architecture figure below, 
resides the native system. We use the same OS abstraction layer 
as we do in the client architecture to provide common abstractions 
for routers running on Linux, Windows, and Android. Running on 
the OS abstraction layer, we have the various low-level networking 
components of the router. Recall that clients, services, and 
peers only use a local interprocess communication mechanism 
to talk to a router, so it is the router that must deal with 
the various available transport mechanisms on a given platform. 
Note the "Local" transport in the router architecture figure which is the sole 
connection to the AllJoyn clients, services, and peers running 
on a particular host.</p>
<p><img src="/sites/default/files/developers/learn/standard-core/router-arch.png" alt="router-arch" /></p>
<p><strong>Figure:</strong> Basic router architecture</p>
<p>For example, a Bluetooth transport would handle the complexities 
of creating and managing piconets in the Bluetooth system. 
Additionally, a Bluetooth transport provides service advertisement 
and discovery functions appropriate to Bluetooth, as well 
as providing reliable communications. Bluetooth and other 
transports would be added at this transport layer along side 
the IP transport.</p>
<p>The wired, Wi-Fi, and Wi-Fi Direct transports are grouped under 
an IP umbrella since all of these transports use the underlying 
TCP-IP network stack. There are sometimes significant differences 
regarding how service advertisement and discovery is accomplished, 
since this functionality is outside the scope of the TCP-IP 
standard; so there are modules dedicated to this functionality.</p>
<p>The various technology-specific transport implementations are 
collected into a Network Transports abstraction. The Sessions module 
handles the establishment and maintenance of communication 
connections to make a collection of routers and AllJoyn applications 
appear as a unified software bus.</p>
<p>AllJoyn routers use the endpoint concept to provide connections 
to local clients, services, and peers but extend the use of 
these objects to bus-to-bus connections which are the transports 
used by routers to send messages from host-to-host.</p>
<p>In addition to the routing functions implied by these connections, 
an AllJoyn router provides its own endpoints corresponding 
to bus objects used for managing or controlling the software 
bus segment implemented by the router. For example, when 
a service requests to advertise a well-known bus name, what 
actually happens is that the helper on the service translates 
this request into a remote method call that is directed to 
a bus object implemented on the router. Just as in the case 
of a service, the router has a number of bus objects living 
at associated object paths which implement specific named interfaces. 
The low-level mechanism for controlling an AllJoyn bus is 
sending remote method invocations to these router bus objects.</p>
<p>The overall operation of certain aspects of router operation 
are controlled by a configuration subsystem. This allows a 
system administrator to specify certain permissions for the 
system and provides the ability to arrange for on-demand 
creation of services. Additionally, resource consumption may 
be limited by configuration of the router, allowing a system 
administrator to, for example, limit the number of TCP connections 
active at any given time. There are options which allow system 
administrators to mitigate the effects of certain denial-of-service 
attacks, by limiting the number of connections which are 
currently authenticating, for example.</p>
<h2 id="summary">Summary</h2>
<p>The AllJoyn framework is a comprehensive system designed to 
provide a framework for deploying distributed applications 
on heterogeneous systems with mobile elements.</p>
<p>The AllJoyn framework provides solutions, building on proven 
technologies and standard security systems, that address the 
interaction of various network technologies in a coherent, 
systematic way. This allows application developers to focus 
on the content of their applications without requiring a large 
amount of low-level networking experience.</p>
<p>The AllJoyn system is designed to work together as a whole 
and does not suffer from inherent impedance mismatches that 
might be seen in ad-hoc systems built from various pieces. 
We believe that the AllJoyn system can make development and 
deployment of distributed applications significantly simpler 
than those developed on other platforms.</p>
  </div>
  </div>

  
  
</article>
              </div>
                                   
          </section>

          
        </div>
      </div>


      
    </div>
  </div>
</div>
<div id="sticky-footer">
  
      <footer id="footer" class="clearfix" role="contentinfo">
        <div class="region region-footer"><div class="region-inner clearfix"><nav id="block-system-user-menu" class="block block-system block-menu"  role="navigation"><div class="block-inner clearfix">        <div class="block-content content"><ul class="menu clearfix"><li class="first menu-item-537"><a href="/user/register" title="">Register</a></li><li class="last menu-item-536"><a href="/user/login" title="">Log In</a></li></ul></div></div></nav></div></div>    </footer>
  
  <div id="lfcollabprojects-footer">
    <div class="gray-diagonal">
      <div class="footer-inner">
        <p>&copy; 2017 AllSeen Alliance, Inc. All Rights Reserved.</p>
        <p>The Linux FoundationÂ® is a registered trademark of The Linux Foundation. AllSeen, Designed for AllSeen and AllSeen Alliance are trademarks of the AllSeen Alliance, Inc. AllJoynÂ® is a registered trademark of AllSeen Alliance, Inc.</p>
        <p>Linux is a registered <a href="http://www.linuxfoundation.org/programs/legal/trademark" title="Linux Mark Institute">trademark</a> of Linus Torvalds.</p>
        <p>Please see our <a href="/brand-guidelines">brand guidelines</a>, <a href="/trademarks">trademark guidelines</a>, <a href="/about/governance/ip-policy">IP policy</a>, <a href="/terms">terms of use</a>, <a href="/license">license</a>, and <a href="/privacy">privacy policy</a>.</p>
      </div>
    </div>
    <div id="body-bottom">
      </div>
</body>
</html>
